{"meta":{"title":"Mengfei's Personal Website","subtitle":"Blogs & Notes","description":"","author":"Mengfei","url":"https://www.zhaomengfei.xyz","root":"/"},"pages":[{"title":"About","date":"2021-10-09T08:21:34.000Z","updated":"2021-10-11T08:18:34.080Z","comments":true,"path":"about/index.html","permalink":"https://www.zhaomengfei.xyz/about/index.html","excerpt":"","text":"关于我 | About Me 兴趣包括编程、FPGA、Python、嵌入式等。很喜欢乔布斯的那句话：“Stay Hungry, Stay Foolish”，在不断学习的路上一起进步呦~ 关于网站 | About Website 这个网站用来发布一些Blogs和Notes吧，会努力维护它的，欢迎大家积极点赞、评论~ 更新日志 | Update Log 2021.10.09 网站建立"},{"title":"Archives","date":"2021-10-09T08:42:30.000Z","updated":"2021-10-10T08:10:33.308Z","comments":true,"path":"archives/index.html","permalink":"https://www.zhaomengfei.xyz/archives/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-10-09T08:42:11.000Z","updated":"2021-10-10T08:09:57.787Z","comments":true,"path":"tags/index.html","permalink":"https://www.zhaomengfei.xyz/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-10-09T06:56:26.000Z","updated":"2021-10-10T08:10:04.382Z","comments":true,"path":"categories/index.html","permalink":"https://www.zhaomengfei.xyz/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中","slug":"Blog/ZYNQ/ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中","date":"2021-10-10T05:26:01.000Z","updated":"2021-10-11T03:30:27.552Z","comments":true,"path":"2021/10/10/Blog/ZYNQ/ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/ZYNQ/ZYNQ%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABOOT.bin%EF%BC%8Cfsbl%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E7%A8%8B%E5%BA%8F%E5%9B%BA%E5%8C%96%E5%88%B0%E6%9D%BF%E4%B8%8A%E7%9A%84QSPI_Flash%E4%B8%AD/","excerpt":"","text":"1、环境介绍： ZYNQ-7000 MZ7XA板卡 vivado 2020.1 vitis 2020.1 2、正文： 首先介绍一下镜像这个概念，下面是百度百科中的解释： 所谓镜像文件其实和rar ZIP压缩包类似，它将特定的一系列文件按照一定的格式制作成单一的文件，以方便用户下载和使用，例如一个操作系统、游戏等。它最重要的特点是可以被特定的软件识别并可直接刻录到光盘上。其实通常意义上的镜像文件可以再扩展一下，在镜像文件中可以包含更多的信息。比如说系统文件、引导文件、分区表信息等，这样镜像文件就可以包含一个分区甚至是一块硬盘的所有信息。 额，理解了镜像的概念，接下来以在vivado vitis工程中的实际操作中学习BOOT.bin fsbl等内容。 vivado工程方面： 配置一下PS，生成一个HDL Wrapper.v，然后在Wrapper.v文件中加入一段4bit流水灯的代码，代码如下： 然后生成.bit文件，导出xsa文件，接下在切换到vitis开发。 vitis工程方面： 新建一个硬件工程，命名为run_led_hw_platform 指定刚vivado生成的xsa文件，上图中记得勾选Generate boot components，这个会在生成的硬件工程中产生一个zynq_fsbl文件夹，打开会发现有一堆fsbl相关的源文件，编译一下整个硬件工程，就会在下面图二的1处产生一个fsbl.elf文件。 接下来新建一个helloWorld的应用工程，命名为helloWorld，并编译一下。 接下来讲一下当我们成功固化程序到flash中后，ZYNQ板子启动的过程。 ZYNQ内部的BootROM存储有一段在CPU复位后固定执行的代码。称为stage-0启动代码。（这个ROM中的代码，掉电不丢失） 这段代码用来配置一个ARM CPU和一些必要外设，从而能从一个启动设备中获取FSBL（first stage boot loader）执行。BootROM是一个ROM，不可写，PL的配置不是通过BootROM实现的。BootROM不能使用DDR和SCU，因为它们还没有初始化。 BOOT.bin是一个镜像文件，我们这里是将它存储在外部的QSPI-Flash中，BOOT.bin包含有fsbl.elf，PL部分配置文件（.bit)，应用工程的可执行二进制文件（helloWorld.elf文件） 当BootROM把flash中BOOT.bin中的fsbl装载到OCM后，接下来就开始执行fsbl了。 fsbl负责下面这些： 对于基于zynq的嵌入式Linux系统，BootROM引导启动FSBL，FSBL引导启动U-Boot，U-boot引导启动Linux内核。 理解了上面这些，接下来继续创建Boot Image。 上图中出现了好多文件，它们的关系详情请参考ug821的boot章节，这个BOOT.bin就是需要制作出来的镜像文件，它里面包含有下面fsbl.elf，run_lef.bit，helloWorld.elf文件。至于上面的helloWorld.bif文件，它是一个Boot Image Format 文件，用于制作BOOT.bin用的。 制作好BOOT.bin后，接下来把它烧录到QSPI-Flash中： 在consol窗口中出现一系列消息后，就成功了。 此时打开一个串口窗口，对板子重新上电，可看到流水灯在闪烁，串口打印成功。 3、参考文献： 米联客教程 ZYNQ_FSBL学习 zynq中的BootROM","categories":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/categories/ZYNQ/"}],"tags":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/tags/ZYNQ/"}]},{"title":"Arduino舒适的开发环境搭建：vscode+arduino插件","slug":"Blog/Arduino/Arduino舒适的开发环境搭建_vscode_arduino插件","date":"2021-10-10T04:26:01.000Z","updated":"2021-10-11T03:34:14.930Z","comments":true,"path":"2021/10/10/Blog/Arduino/Arduino舒适的开发环境搭建_vscode_arduino插件/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_arduino%E6%8F%92%E4%BB%B6/","excerpt":"","text":"板卡：Arduino uno OS: win10 开发环境：vscode + arduino插件 工程作用：可以实现arduino的LED闪烁。 安装Arduino插件： 目录结构： 1、在vscode的用户配置文件settings.json中加入下面这些内容，用来对arduino插件做全局的默认配置： 1234567891011121314151617181920212223242526272829&quot;arduino.path&quot;: &quot;G:\\\\Arduino&quot;, // arduino IDE安装的位置&quot;arduino.commandPath&quot;: &quot;arduino_debug.exe&quot;, //这是一个上述位置中的exe文件&quot;C_Cpp.default.browse.path&quot;: [ &quot;G:\\\\Arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;, &quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;],&quot;C_Cpp.default.includePath&quot;: [ //头文件引用路径 &quot;G:\\\\Arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;, &quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;],&quot;arduino.logLevel&quot;: &quot;info&quot;,&quot;arduino.allowPDEFiletype&quot;: false,&quot;arduino.enableUSBDetection&quot;: true,&quot;arduino.disableTestingOpen&quot;: false,&quot;arduino.skipHeaderProvider&quot;: false,&quot;arduino.disableIntelliSenseAutoGen&quot;: true,&quot;arduino.additionalUrls&quot;: [ &quot;https://raw.githubusercontent.com/VSChina/azureiotdevkit_tools/master/package_azureboard_index.json&quot;, &quot;http://arduino.esp8266.com/stable/package_esp8266com_index.json&quot;],&quot;arduino.defaultBaudRate&quot;: 115200, 2、在.vscode文件夹下新建一个c_cpp_settings.json，并添加下面内容： 上述中的includePath是需要认真设置的，这个不设置也行，在编写源文件时，会在#include的头文件下面出现红色波浪线，提示找不到文件之类的，例如下方这个。此时点击Quick Fix，把路径添加上就可以了，新添加的路径会自动出现在上方c_cpp_settings.json中的includePath中。 3、在.vscode文件夹下新建一个arduino.json，并添加下面内容： 12345678&#123; &quot;sketch&quot;: &quot;appMain.ino&quot;, &quot;port&quot;: &quot;COM10&quot;, &quot;board&quot;: &quot;arduino:avr:uno&quot;, &quot;output&quot;: &quot;./build&quot;, &quot;debugger&quot;: &quot;jlink&quot;, &quot;intelliSenseGen&quot;: &quot;global&quot;&#125; 4、编写源文件 请在github中下载。 5、编译烧录 写好源文件后，点击图中的A是编译，B是烧录，C是修改串口号，D是c_cpp_settings.json中的&quot;name&quot; 6、搞定 工程文件有需要的话，请到Github中下载 另外，vscode-arduino官方的文档看这个链接。","categories":[{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"}]},{"title":"如何将阿里云的域名绑定到Github Page","slug":"Blog/Hexo搭建个人网站/如何将阿里云的域名绑定到Github_Page","date":"2021-10-10T04:26:01.000Z","updated":"2021-10-10T08:15:03.681Z","comments":true,"path":"2021/10/10/Blog/Hexo搭建个人网站/如何将阿里云的域名绑定到Github_Page/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E5%A6%82%E4%BD%95%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0Github_Page/","excerpt":"","text":"1、阿里云注册一个域名 2、设置域名解析 3、添加记录，将域名指向自己的Github Page 首先获得自己的Github Page的IP地址。 1ping username.github.io 然后添加一条记录，并按照下图所示设置，A处要填上刚获得的Github Page的IP地址。（这些相关知识点参见链接） 然后再新建一条记录，记录值要填自己的github.io 设置好了后，应该是看到下面这样，需要看到两记录的状态是正常的才行： 4、在Github page中设置 在自己的username.github.io界面，点击Setting，然后直接往下翻，找到GitHub Pages，并进入设置页面。 然后在下面设置域名，并勾选Enforce HTTPS（这个是有加密的，更好些，这样之后自己的网站链接前面是https开头的，如果这里是灰状勾选不了，是因为设置时有问题导致的。），A处就是自己的网站名字。 5、在hexoSite工程文件中设置 在source文件夹下新建一个名称为CNAME的文件，无后缀。并键入下面这样的东西（记得修改为自己的）： 12www.zhaomengfei.xyzzhaomengfei.xyz 6、然后就是正常的hexo的命令操作 12hexo cleanhexo d -g 7、最终效果 这样，以后在浏览器中键入username.github.io zhaomengfei.xyz www.zhaomengfei.xyz时都会自动跳到https://www.zhaomengfei.xyz 的。 搞定~","categories":[{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/categories/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.zhaomengfei.xyz/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","permalink":"https://www.zhaomengfei.xyz/tags/Github-Page/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}]},{"title":"Arduino舒适的开发环境搭建：vscode+PlatformIO","slug":"Blog/Arduino/Arduino舒适的开发环境搭建_vscode_platformio","date":"2021-10-09T15:26:01.000Z","updated":"2021-10-11T03:34:18.722Z","comments":true,"path":"2021/10/09/Blog/Arduino/Arduino舒适的开发环境搭建_vscode_platformio/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/09/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_platformio/","excerpt":"","text":"一、前言 Arduino自带的IDE用在小的工程时还可以应付，但是面对大型工程时，就比较鸡肋了。本着想愉快的编写Arduinio的代码，让我们开始“折腾”吧~ 开发环境： win10 vscode + PlatformIO插件 Arduino 官方的IDE 1.8.16 手头有一个Arduino UNO板卡 该博客中的某些链接需要梯子呦 二、开始 首先下载、安装vscode。然后安装platformio插件，如下图： 这个插件在使用IDE新建工程时，有些bug，就是特别慢，网上说是需要从github上下载一些东西，所以就很慢，而国内在使用github时有时候就是挺慢的。不过还是想用这么香的东西，肿么办呢？且听我慢慢道来。 使用IDE方式新建helloworld工程： 首先点击如图所示的，更新一下pio core，下面是官方的介绍（官方文档链接），小伙伴记得仔细看官方文档呦。 然后点击下面的New Project。 这里在选择工程路径时，有时加载会有些慢。然后点击底部的Finish，之后会加载一段时间，这个时间真是很奇怪，快时只需要几秒钟，慢时一个小时也搞不定。慢时我后面会讲如何应对。 之后窗口中会出现两个相同的文件夹，需要右击任意删除一个（点击Remove folder from workspace）。之后save as一个workspace。 处理之后一定要确保左侧的工作空间窗口中像上图这样，即一个workspace下面只有一个helloworld4的工作目录。如果是像下面这样嵌套的路径结构或者其他的结构，后面在编写源文件时，可能会出现头文件引用找不到的问题，即例如右侧B处的Serial下面有个红色波浪线，提示找不到该玩意儿在哪里。。。 而这点是vscode中c/c++插件的一个bug（详情参见此链接），只要想办法绕过此bug即可。 当然若实在是头文件引用错误的话，可以暴力点，关闭所有的错误提示，从此再无红色波浪线（设置看此链接）。 编写源代码： 下面是让LED灯闪烁，并发送数据到串口。 main.cpp: 12345678910111213141516171819#include &lt;Arduino.h&gt;#define onboard 13void setup()&#123; // put your setup code here, to run once: pinMode(onboard, OUTPUT); Serial.begin(9600);&#125;void loop()&#123; // put your main code here, to run repeatedly: digitalWrite(onboard, LOW); delay(1000); digitalWrite(onboard, HIGH); delay(1000); Serial.println(&quot;Hello World!&quot;);&#125; 对了，arduino的代码其实就是C++代码，当然可以分成很多个子.cpp，.h来编写代码，参考链接1， 链接2。 编译，烧录： 上图中A是编译，B是烧录，C是打开串口工具。 下面是串口中的数据： 搞定！ 若通过IDE方式来创建工程，很慢的话，请接着往下看 首先看下这个链接。 可以通过CLI的方式来创建工程，用vscode打开一个空文件夹，然后在terminal中敲入 pio project init --board uno，然后会在vscode中释放一堆一样的文件夹结构（这个过程会快一些吧），然后打开这个platformio工程，此时看下platformio.ini文件中是否正确，如下所示。 现在新建并编写自己的源文件即可。 ps: 给个油管的PIO开发arduino的教程。 最后：","categories":[{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://www.zhaomengfei.xyz/tags/PlatformIO/"}]}],"categories":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/categories/ZYNQ/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/categories/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/tags/ZYNQ/"},{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.zhaomengfei.xyz/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","permalink":"https://www.zhaomengfei.xyz/tags/Github-Page/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://www.zhaomengfei.xyz/tags/PlatformIO/"}]}