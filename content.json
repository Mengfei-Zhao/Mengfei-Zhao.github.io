{"meta":{"title":"Mengfei's Personal Website","subtitle":"Blogs & Notes","description":"","author":"Mengfei","url":"https://www.zhaomengfei.xyz","root":"/"},"pages":[{"title":"About","date":"2021-10-09T08:21:34.000Z","updated":"2022-05-07T08:07:35.000Z","comments":false,"path":"about/index.html","permalink":"https://www.zhaomengfei.xyz/about/index.html","excerpt":"","text":"关于我 | About Me 兴趣包括编程、FPGA、Python、嵌入式等。很喜欢乔布斯的那句话：“Stay Hungry, Stay Foolish”，在不断学习的路上一起进步呦~ 关于网站 | About Website 这个网站用来发布一些Blogs和Notes吧，会努力维护它的，欢迎大家积极点赞、评论~ 更新日志 | Update Log 2021.10.09 网站建立"},{"title":"Archives","date":"2021-10-09T08:42:30.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"archives/index.html","permalink":"https://www.zhaomengfei.xyz/archives/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-10-09T06:56:26.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"categories/index.html","permalink":"https://www.zhaomengfei.xyz/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-10-09T08:42:11.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"tags/index.html","permalink":"https://www.zhaomengfei.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"How to release software of Python？","slug":"Blog/Python/How_to_release_software_of_Python","date":"2022-10-25T16:00:00.000Z","updated":"2022-10-26T02:37:06.057Z","comments":true,"path":"2022/10/26/Blog/Python/How_to_release_software_of_Python/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/10/26/Blog/Python/How_to_release_software_of_Python/","excerpt":"","text":"如何打包并发布一款用Python写的软件？ 开发环境： win10, Pycharm2021 用到的工具：pyinstaller, NSIS pyinstaller打包项目 利用Pyinstaller打包整个python工程，它会将项目所用到的所有依赖包打包在一起。这里通过 release.spec文件进行配置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- mode: python ; coding: utf-8 -*-# 这里将需要用到的resources文件添加一下，不要把自己的源码路径给添加进去了，否则你会在打包好的文件夹下看到自己的源码工程，当然如果你想要开源的话，那就没关系了。added_files = [(&quot;project_relative_path\\\\resources&quot;, &quot;project_relative_path\\\\resources&quot;),]# 这里是为了给软件加密，pyinstaller只能加密Python Bytecode，一定要搞清楚什么是Bytecode，也即pyinstaller并不会给python源码加密。这里有一个比较复杂的点，那就是安装加密用的pycrypto包，后面我会单独讲。block_cipher = pyi_crypto.PyiBlockCipher(key=&#x27;1234567812345678&#x27;)a = Analysis( [&#x27;main.py&#x27;], # 程序的入口 pathex=[], binaries=[], datas=added_files, hiddenimports=[], hookspath=[], hooksconfig=&#123;&#125;, runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False,)pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)exe = EXE( pyz, a.scripts, [], exclude_binaries=True, name=&#x27;name_of_program&#x27;, debug=False, bootloader_ignore_signals=False, strip=False, upx=True, console=False, disable_windowed_traceback=False, argv_emulation=False, target_arch=None, codesign_identity=None, entitlements_file=None, icon=&quot;absolute_path_of_logo.png&quot; # 这里给.exe加一个logo)# onedircoll = COLLECT( exe, a.binaries, a.zipfiles, a.datas, strip=False, upx=True, upx_exclude=[], name=&#x27;name_of_program&#x27;,) 写好上面的 release.spec文件后，然后在终端相应的目录执行 pyinstaller .\\release.spec，便可以对项目进行打包了。上面不懂的地方去看官方文档吧。下面有一个例子，读者可以看一下。 链接1 安装pyinstaller加密用的pycrypto包 注意，我试过网上说的PyCryptodome，但是并没有成功。还是得安装pyisntaller指定的pycrypto包才行。我的win10+python3.8.5在用虚拟环境中的pip3安装pycrypto包时，遇到了报错。解决办法参考 链接2，看下面这个回答。 NSIS制作软件安装、卸载界面 先看一下这个视频教程。要是使用最简单的安装，即只有一个路径选择，那么视频里已经讲了。若是想使用高级一点的安装、卸载，则要用脚本的形式，即写一个.nsi文件。这个.nsi文件在编译完可以生成一个.exe的文件，双击这个生成的.exe就可以进行程序的安装了。 下面讲一个demo。 写 Program_Name.nsi文件，代码如下。该文件的书写需要与实际的安装和卸载过程结合起来，多尝试几次就明白代码的语法了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596; Program_Name.nsi;--------------------------------; The name of the installerName &quot;Program_Name&quot;; The file to writeOutFile &quot;Install_Program_Name.exe&quot;; Request application privileges for Windows Vista and higherRequestExecutionLevel user; Build Unicode installerUnicode True; The default installation directoryInstallDir $PROGRAMFILES\\Program_Name; Registry key to check for directory (so if you install again, it will ; overwrite the old one automatically)InstallDirRegKey HKLM &quot;Software\\Program_Name&quot; &quot;Install_Dir&quot;;--------------------------------; PagesPage componentsPage directoryPage instfilesUninstPage uninstConfirmUninstPage instfiles;--------------------------------; The stuff to installSection &quot;Program_Name (required)&quot; SectionIn RO ; Set output path to the installation directory. SetOutPath $INSTDIR ; Put file there. Program_Name is the folder name that you wanna release, this is rightly the folder that pyinstaller packaged. File /r Program_Name\\*.* ; Write the installation path into the registry WriteRegStr HKLM SOFTWARE\\Program_Name &quot;Install_Dir&quot; &quot;$INSTDIR&quot; ; Write the uninstall keys for Windows WriteRegStr HKLM &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Program_Name&quot; &quot;DisplayName&quot; &quot;Program_Name&quot; WriteRegStr HKLM &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Program_Name&quot; &quot;UninstallString&quot; &#x27;&quot;$INSTDIR\\uninstall.exe&quot;&#x27; WriteRegDWORD HKLM &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Program_Name&quot; &quot;NoModify&quot; 1 WriteRegDWORD HKLM &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Program_Name&quot; &quot;NoRepair&quot; 1 WriteUninstaller &quot;$INSTDIR\\uninstall.exe&quot; SectionEnd; Optional section (can be disabled by the user)Section &quot;Start Menu Shortcuts&quot; CreateDirectory &quot;$SMPROGRAMS\\Program_Name&quot; CreateShortcut &quot;$SMPROGRAMS\\Program_Name\\Uninstall.lnk&quot; &quot;$INSTDIR\\uninstall.exe&quot; CreateShortcut &quot;$SMPROGRAMS\\Program_Name\\Program_Name.lnk&quot; &quot;$INSTDIR\\Program_Name.exe&quot;SectionEnd; Optional section (can be disabled by the user)Section &quot;Desktop Shortcut&quot; SectionX SetShellVarContext current CreateShortCut &quot;$DESKTOP\\Program_Name.lnk&quot; &quot;$INSTDIR\\Program_Name.exe&quot;SectionEnd;--------------------------------; UninstallerSection &quot;Uninstall&quot; ; Remove registry keys DeleteRegKey HKLM &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Program_Name&quot; DeleteRegKey HKLM SOFTWARE\\Program_Name ; Remove all files in INSTDIR Delete $INSTDIR\\*.* ; Remove all shortcuts, if any Delete &quot;$SMPROGRAMS\\Program_Name\\*.lnk&quot; Delete &quot;$DESKTOP\\*.lnk&quot; ; Remove directories RMDir &quot;$SMPROGRAMS\\Program_Name&quot; RMDir &quot;$INSTDIR&quot;SectionEnd 将 Program_Name.nsi放到与Program_name项目包的同一级，如下图所示。 右击 Program_Name.nsi，点击Compile。 然后点击Test Installer，可以测试一下，也可以选择Close。 你会发现在当前文件夹下生成了一个 Install_Program_Name.exe，这个就是程序的安装文件。下面双击它进行安装。先勾选一些功能，然后选择安装路径，点击安装。 安装好了以后会在 Install_Dir文件夹下释放下面的文件： 并且在桌面和开始菜单会生成快捷方式。 若要卸载的话，双击那个 uninstall.exe即可。 我把这个demo上传到github了，需要的同学自取吧，记得给个星哦。","categories":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/tags/Python/"}]},{"title":"AD软件 PCB处理最后GND以及铺铜经验","slug":"Blog/PCB/AD_PCB处理最后GND以及铺铜经验","date":"2022-08-11T16:00:00.000Z","updated":"2022-08-12T10:01:12.443Z","comments":true,"path":"2022/08/12/Blog/PCB/AD_PCB处理最后GND以及铺铜经验/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/08/12/Blog/PCB/AD_PCB%E5%A4%84%E7%90%86%E6%9C%80%E5%90%8EGND%E4%BB%A5%E5%8F%8A%E9%93%BA%E9%93%9C%E7%BB%8F%E9%AA%8C/","excerpt":"","text":"前言： 当PCB已经走完其他的线后，就只剩下GND线了。如果什么都不管，直接给所有层都铺上GND的铜的话，当你进行未连接的走线检查时，会发现仍旧有一些GND的线没有连上，即仍然显示飞线。这是因为这些GND的焊盘在一些孤岛中，就算你打上GND的小过孔，这些孤岛也连不上。下面讲讲如何处理。 环境介绍： AD20 正文： 先给那些仍旧有飞线的的GND的焊盘都引出来一点线，然后打一个过孔，就像下面这样。 然后选一个合适的层来把上面的小焊盘通过走线连接到孤岛外面的GND上去。 之后 T-G-A 重新铺所有层的GND铜，再 T-D-R运行DRC，检查还剩下哪些飞线没有处理。直到处理完所有的飞线。 最后 R-B，只勾选Routing Information，点击Report，来检查连线情况。若是100%了，就OK了。","categories":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/categories/PCB/"}],"tags":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/tags/PCB/"},{"name":"AD软件","slug":"AD软件","permalink":"https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"}]},{"title":"Pycharm在远程Debug时，X11显示图像，matplotlib会报Matplotlib is currently using agg的错","slug":"Blog/Python/Pycharm_远程Debug_X11_matplotlib","date":"2022-06-09T16:00:00.000Z","updated":"2022-06-10T09:22:15.208Z","comments":true,"path":"2022/06/10/Blog/Python/Pycharm_远程Debug_X11_matplotlib/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/06/10/Blog/Python/Pycharm_%E8%BF%9C%E7%A8%8BDebug_X11_matplotlib/","excerpt":"","text":"开发环境： 本地环境win10, Pycharm2021 使用远程的centos7 服务器上的python解释器 Matplotlib会抛出下面的警告，然后用matplotlib画的图也无法显示了。 12UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure. plt.show() 在服务器端的配置 首先要检查服务器上的ssh协议是否正常运行，centos7的话是使用 sudo vim /etc/ssh/sshd_config来编辑ssh的配置文件，加入下面这样的两行。第一行是开启X11Forwarding，第二行是让默认的Display号为11。这个怎么理解呢？以我的使用场景为例，如果该服务器只有自己一个人用ssh的话，当你开启一个MobaXterm，通过ssh连接到服务器后，我本地电脑分配到的Display号默认就是11了。 12X11Forwarding yesX11DisplayOffset 11 在本地机的配置 下面就是只在自己本地机上操作了，用MobaXterm建立ssh的连接（可以设置自动开启X11 Forwarding，这就体现出了它相比于分别操作Putty和X11 ming的优势)。MobaXterm要设置成下面这样，防止ssh休眠，并开启默认开启X11-Forwarding。 这样设置好后，当用ssh连接后，会出现下面的信息： 让MobaXterm在后台运行着，这样用Pycharm才可以正常在本地显示figure。记得在Mobaxterm中键入 echo $DISPLAY来看本地的号，该号要与下面Pycharm中运行程序的配置文件中的设置的一致，如下图所示。若是这两个号不一致，那么你就会得到本文最开始时的Matplotlib警告信息。 搞定！","categories":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/categories/Python/"},{"name":"Pycharm","slug":"Python/Pycharm","permalink":"https://www.zhaomengfei.xyz/categories/Python/Pycharm/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/tags/Python/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://www.zhaomengfei.xyz/tags/Pycharm/"}]},{"title":"Vmware安装ubuntu20的过程全纪录","slug":"Blog/Linux/Vmware_ubuntu20_full_recodes","date":"2022-05-06T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2022/05/07/Blog/Linux/Vmware_ubuntu20_full_recodes/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/05/07/Blog/Linux/Vmware_ubuntu20_full_recodes/","excerpt":"","text":"前言： 目的： 在win10上面的vmware中安装ubuntu20.04的过程全纪录 正文： 第一步 安装vmware和ubuntu，参考这个博客，记得看那篇博客下面的评论。 在进行第15步的时候，你会发现安装过程巨慢，这是因为使用的是国外的镜像，所以就慢。解决方法就是断网，先进入到系统再说，后面再更换镜像源，使用国内镜像，用命令行更新一下就好了。 第二步 装完系统后，第一件事情是更换为国内镜像源。 原文件备份 1sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 编辑源列表文件 1sudo vim /etc/apt/sources.list 将原来文件中内容全删掉，添加下面的内容（清华镜像源） 1234567891011121314151617181920deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse 运行 sudo apt-get update ，目的是从服务器获取全部可用的、最新的软件包列表，并缓存到本地电脑。 运行 sudo apt-get upgrade，该命令会提示你更新软件包，更新就好了。关于 apt-get update和 apt-get upgrade的区别见这个链接。 第三步 解决win10和ubuntu系统之间，无法使用跨平台copy/paste和drag/drop的问题。参考这个，看最高赞回答。 搞好了这一步，就可以实现win10的浏览器中google问题，然后把命令行粘贴到寄生系统ubuntu中。 第四步 挂载win10的文件夹到ubuntu中。 进行这一步的前提是进行了第三步中，安装vmware-tools的步骤。然后选择你想要把win10中哪个文件夹共享过去，依次点击左上角虚拟机 --》 设置 --》 选项 --》 共享文件夹 --》 总是启用 --》 添加要共享的文件夹。 设置好之后直接在ubuntu中执行 vmware-hgfsclient，来查看已经共享过来的文件夹有哪些，你应该可以看到刚设置好的文件夹。 对该共享文件夹进行测试，分别在win10和ubuntu中新建文件，看对方是否更新。 没问题的话，可以将 /mnt/hgfs/share的目录建立一个软连接，放到/home/用户 目录下。即执行 ln -s /mnt/hgfs/share/ /home/用户名/share 。注意：这几条命令中，读者明白意思就行，需要根据自己情况来修改某些词，当然这步建立快捷方式的过程也不是必须的。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.zhaomengfei.xyz/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.zhaomengfei.xyz/tags/Linux/"}]},{"title":"如何安装Xic和Wrspice软件","slug":"Blog/Software/如何安装Xic和Wrspice软件","date":"2022-05-06T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2022/05/07/Blog/Software/如何安装Xic和Wrspice软件/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/05/07/Blog/Software/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Xic%E5%92%8CWrspice%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"这里记录一下在win10上安装Xic Wrspice的过程。 先说结论：我最终是在win10上的vmware中的ubuntu上安装了Xic和Wrspice软件。 刚开始看官网和github上有win10上的安装教程，然后操作了一通，没有成功，中间经历了很多坎坷，得出结论，还是上虚拟机中开发吧。。。下面介绍一下我自己的坎坷历程。 方案一：在win10上直接安装Xic和Wrspice软件 在官网上下载这几个包，然后依次点击安装，装好后就是下面一堆文件，bin文件夹中有所有的启动文件。点击运行软件，你会看到一个终端一闪而过，然后就没有任何动静了。 方案一失败。 方案二：在win10的MSYS2中搞Xic和Wrspice的exe文件 参考这个链接，上小系统MSYS2，在启动配置并启动Xic和wrspice软件。装好MSYS2后，安装一堆环境包，然后将方案一中的那些 sw/xictools/目录挂载到MSYS2系统中的 /usr/local/xictools/目录下。当进行到最后一步时，在终端中运行 winpty program时，给出了 Failed to load the program DLL的报错。参考github中的该issue，在2022.05.07这一天时，该issue还是open的，官方人员并没有给出有效的解决方案。 最终，方案二也失败。 方案三：在win10的MSYS2中编译xic和wrspice的源码 参考github中的说明，决定把该github的xic, wrspice源码文件下载下来，在MSYS2中编译这些源码，最终生成.exe文件，我再去启动这些.exe文件，会不会就可以work了呢？试试再说。 它官网给出的说明是使用MSYS2，而github中给出的说明是用Cygwin，这两个东西并不一样，但是我觉得对于编译该xic软件应该没啥区别吧，就还是继续使用了方案二中的MSYS2了。先是下载一堆准备环境，其中还参考了github文档中Linux的说明部分，把该装的都装上了。 最终到了 make config的环节，运行以后，给出了类似于下面这样的报错： 1make[2]: *** No rule to make target &#x27;depend&#x27;. Stop. 它的源文件我并没有修改什么，但是看这报错好像是它源码的makefile没有处理好，光解决这个问题，搞了好久，反正就是一个又一个的报错吧。 最终放弃了，方案三失败。 方案四：在win10的虚拟机中的ubuntu中安装xic和wrspice的.deb文件 既然品出来了，它原本的源码就是在linux下开发的，那我直接上linux系统应该好一些吧。 从上图中可知好几种linux系统都是可以的，但是由于见到刚上面那个issue中有人提到用ubuntu装好了软件，所以我也选择了ubuntu，并且选择了和它一模一样的版本。下面开搞！ 参考这个教程，下载这一堆.deb文件。大家可以参考我的另一篇博客，来装vmware和ubuntu。装好ubuntu后，将win10下的xic的.deb的安装包所在文件夹挂载到虚拟机的ubuntu中，在终端中安装即可。当跟着官网的说明搞完后，就可以正常启动xic, wrspice软件了。 成功！","categories":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/categories/softwares/"}],"tags":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/tags/softwares/"}]},{"title":"win10如何安装JoSIM软件","slug":"Blog/Software/win10如何安装JoSIM软件","date":"2022-04-11T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2022/04/12/Blog/Software/win10如何安装JoSIM软件/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/04/12/Blog/Software/win10%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85JoSIM%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"一、前言 这里记录一下在win10上安装JoSIM - Superconducting Circuit Simulator的过程。 开发环境： win10 vscode （非必须） python 3+ python 下的 cmake 3.14.4 Git C++ compiler with C++17 support 二、开始 JoSIM官方文档 将下面两个包下载下来，上面这个是傻瓜版，下载完解压直接用，不用编译出josim-cli.exe和josim.lib了，因为里面已经有了。而下面这个压缩包则是包含源码的工程，例如文档、例子工程等，同样把它解压。 先通过python 3.+在该工程下建立一个虚拟环境venv，并激活它。下面就在该虚拟环境中安装一些package。 运行pip install cmake==3.14.4 下面安装MSVC（下载链接），然后只需要安装带有cmake字样的功能即可，装好后重启电脑。 运行 cmake --help，来看是否是如下图所示的样子，新安装的MSVC上有个星号，有的话就往下继续。 按照下面的步骤进行 当执行完cmake …后，会提示一个Git tag标签的错误，这时候要去这个作者github上查看最新的工程的git的hash值，然后复制粘贴到下面的位置。 再次cmake … 就没问题了。 然后把最后一个命令执行了，就会在Release文件夹下产生下面两个东西（这两个东西是和直接下载的另个包中的东西是一致的），然后看官方教程即可。","categories":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/categories/softwares/"}],"tags":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/tags/softwares/"}]},{"title":"PSCAN2在win10上的安装教程","slug":"Blog/Software/PSCAN2在win10上的安装教程","date":"2022-04-08T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2022/04/09/Blog/Software/PSCAN2在win10上的安装教程/","link":"","permalink":"https://www.zhaomengfei.xyz/2022/04/09/Blog/Software/PSCAN2%E5%9C%A8win10%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"","text":"一、前言 目的：在win10上安装PSCAN2 Superconductor Circuit Simulator软件。 开发环境： win10 vscode + python插件 + vhdl插件 二、开始 查看官网要求：官网链接 可以看到是安装32 bit的anaconda，所以打开Anaconda网站，往下翻，找到32 bit的windows安装包。可以看到写下这篇博客时，Anaconda已经更新到了Python 3.9，而PSCAN2要求的python环境是3.8的，这个版本差异我是通过后续在Anaconda软件内新建3.8版本的python环境来解决的，所以这里就直接下载这个Python3.9 32bit 的安装包即可。下载好了后，安装，参考这个Anaconda安装教程。 anaconda安装好了后，要是没有将它加入到环境变量，需要加入到环境变量，否则无法在terminal中执行conda命令，参考这个。 接下来新建一个python 3.8的环境（按照pscan2 的官网要求），参考这个，在这篇教程中的py36可以自定义的，当然我们这里需要新建成3.8，而不是3.6的。 接下来将pscan2网站的所有东西下载下来，即下面这些东西，留着用来学习吧。假设我们下载到了一个名叫 pscan2文件夹，并将这所有的压缩包类的都解压到该目录下。 在 pscan2文件夹中，开一个终端，在终端中切换到我们的python3.8环境，然后执行 conda install pscan2-xxx.bz2命令，目的是将pscan2软件部署到该Python环境中，接下来就可以启动pscan2软件了。 在上面的终端中，cd到testnot文件夹（这里面是一个demo工程，详情见pscan的两个pdf手册），然后键入下面图片中的命令 python -m pscan2.gui testnot，幸运的话，你就能正常启动软件了，并看到GUI软件出现。 遇到了一个bug: 我在执行上述命令后，遇到了下面这样的错误：（参考的是这个） 解决办法，打开这个LodaCircuit.py文件，在报错的这一行（如下图所示）进行修改，加入这个 , encoding='UTF-8' ，然后保存。再执行一次该命令 python -m pscan2.gui testnot，这次应该就可以正常启动pscan的GUI了。GUI如下所示。 最后：","categories":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/categories/softwares/"}],"tags":[{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/tags/softwares/"}]},{"title":"Python_使用GUI和多线程时报错","slug":"Blog/Python/Python_使用GUI和多线程时报错","date":"2021-11-28T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/11/29/Blog/Python/Python_使用GUI和多线程时报错/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/11/29/Blog/Python/Python_%E4%BD%BF%E7%94%A8GUI%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%B6%E6%8A%A5%E9%94%99/","excerpt":"","text":"开发环境： win10, Pycharm2021 这里记录一下解决该问题的历程。该工程中使用到了PyQt5的GUI，多线程技术等。使用pycharm，在程序运行时，程序偶尔会莫名奇妙的退出，并只是报下面的错误： 1Process finished with exit code -1073741819 (0xC0000005) 纳尼，只是给出了这一个报错，却没有任何traceback？？！（想直接看结论的请下滑到底）并且这个报错只是偶尔才会给出。上网搜索上面这个报错，查到了这个，按照其给出的方法试了试： 于是查看win10的事件管理器，发现了下面的报错信息，而这些竟然在pycharm中完全不显示。由下面看出来应该是pyqt5引起的报错，于是重新安装了pyqt5，报错并没有解决。 又上网搜索该 事件管理器中的报错，没有解决问题。 于是又上网搜索 pycharm come across error without traceback，终于努力对了方向。找到了这个，按照下面这种方法试了试，终于在debug时给出了具体的 traceback。 Debug的Console中给出的具体的报错如下，而且在程序靠前的某处还给出了一个警告，但是并没有影响程序的往下执行。 12345678警告如下：QObject::setParent: Cannot set parent, new parent is in a different thread--snippets--报错如下：QObject: Cannot create children for a parent that is in a different thread.(Parent is QTextDocument(0x18992e5ad60), parent&#x27;s thread is QThread(0x18990b3af30), current thread is QThread(0x18993804600) 于是上网搜索这两个报错，发现了link1, link2, link3： 看完后有了灵感，总之是pyqt5的GUI和多线程导致的报错。于是上网搜索 pyqt5 qthread关键词，找到了一个令人欣喜若狂的文章：戳我。该文章中还讲了python的线程和QThread的比较。看完后完全明白了，上面的这些警告和报错是如何产生的。我的程序是先运行windows的部分，此时是在mainThread里，然后在mainThread里又开了一个python的thread去处理mainThread里的一些objects和widgets，而每当要访问这些widgets的地方都会抛出上述的警告和错误。 然后按照该文章，比葫芦画瓢就好了。搞定~","categories":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/tags/Python/"}]},{"title":"Python_多继承时_父类之间竟然可以相互调用method","slug":"Blog/Python/Python_多继承时_父类之间竟然可以相互调用method","date":"2021-11-08T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/11/09/Blog/Python/Python_多继承时_父类之间竟然可以相互调用method/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/11/09/Blog/Python/Python_%E5%A4%9A%E7%BB%A7%E6%89%BF%E6%97%B6_%E7%88%B6%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8method/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env python# -*- coding:utf-8 -*-class B(object): def func_b(self): print(&quot;In class B, func_b&quot;) # print(&#x27;B: &#x27;, B.__mro__) print(&#x27;B: &#x27;, self) self.func_d() # 调用同为父类的D中的func_d函数class C(object): def func_c(self): self.func_b() print(&#x27;C: &#x27;, self) # print(&#x27;C: &#x27;, C.__mro__) print(&quot;In class C, func_c&quot;)class D(object): def func_d(self): print(&#x27;D: &#x27;, self) # print(&#x27;D: &#x27;, D.__mro__) print(&quot;In class D, func_d&quot;)class A(B, C, D): # A同时继承B,C,D def __init__(self, parent=None): super(A, self).__init__() print(&#x27;A: &#x27;, self) # print(&#x27;A: &#x27;, A.__mro__) def func_d(self): print(&quot;In class A, func_d&quot;)if __name__ == &#x27;__main__&#x27;: A_inst = A() print(&#x27;A_inst: &#x27;, A_inst) A_inst.func_b() A_inst.func_c() A_inst.func_d() 上面B,C,D都是A的父类，互为平行关系，而C类中的func_c竟然可以调用B类中的func_b？？？程序运行结果如下，可以看到类实例A_inst和A, B,C,类中的self是一个内存地址，这也就解释了为何C类中的func_c竟然可以调用B类中的func_b。 123456789101112A: &lt;__main__.A object at 0x000002D60CE2E070&gt;A_inst: &lt;__main__.A object at 0x000002D60CE2E070&gt;In class B, func_bB: &lt;__main__.A object at 0x000002D60CE2E070&gt;In class A, func_dIn class B, func_bB: &lt;__main__.A object at 0x000002D60CE2E070&gt;In class A, func_dC: &lt;__main__.A object at 0x000002D60CE2E070&gt;In class C, func_cIn class A, func_d **知识点：**有self时，该方法是绑定到对象的方法。 1234567891011class Person(object): def func01(self): print(&#x27;绑定到对象的方法&#x27;) @classmethod def func02(cls): print(&#x27;绑定到类的方法&#x27;) @staticmethod def func03(): print(&#x27;非绑定方法&#x27;) 参考：","categories":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/tags/Python/"}]},{"title":"AD软件_PCB板的四个角放置通孔和圆弧keepout线的快捷方法","slug":"Blog/PCB/AD_PCB板的四个角放置通孔和圆弧keepout线的快捷方法","date":"2021-10-14T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/15/Blog/PCB/AD_PCB板的四个角放置通孔和圆弧keepout线的快捷方法/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/15/Blog/PCB/AD_PCB%E6%9D%BF%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E6%94%BE%E7%BD%AE%E9%80%9A%E5%AD%94%E5%92%8C%E5%9C%86%E5%BC%A7keepout%E7%BA%BF%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E6%B3%95/","excerpt":"","text":"前言： 环境介绍： AD20 正文： 在开始画PCB时，先用keepout线画一个矩形，把origin点设置到角落里。 然后放置一个通孔（用于安装螺丝，来固定板卡），并设置通孔的坐标为一个（-3.3mm, 3.3mm），这个距离自己掌握，但必须x,y绝对值相等。 选中通孔，ctrl+c，出来绿色十字架时，点一下origin（以Origin）为复制参考点。点击另外的三个角，ctrl+v，出现绿色十字架时，按下空格来旋转，然后点击板卡的顶点。搞定！ 之后在四个角画keepout圆弧，选择圆弧工具： 出现绿色十字架，点击一下通孔的圆心： 然后点击大圆与矩形边相切的位置，如下图（我们只需要右下角的四分之一圆弧）： 之后删除多余的矩形的角，就得到这样的了。 然后选中这个四分之一圆弧，以通孔圆心为参考点，复制，粘贴处其余3个角。 搞定！","categories":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/categories/PCB/"}],"tags":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/tags/PCB/"},{"name":"AD软件","slug":"AD软件","permalink":"https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"}]},{"title":"AD软件方便的铺铜，并放置via阵列","slug":"Blog/PCB/AD方便的铺铜方法_并放置via阵列","date":"2021-10-11T16:00:00.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/12/Blog/PCB/AD方便的铺铜方法_并放置via阵列/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/12/Blog/PCB/AD%E6%96%B9%E4%BE%BF%E7%9A%84%E9%93%BA%E9%93%9C%E6%96%B9%E6%B3%95_%E5%B9%B6%E6%94%BE%E7%BD%AEvia%E9%98%B5%E5%88%97/","excerpt":"","text":"前言： 环境介绍： AD20 目的： 将PCB两面都铺上GND的铜，并放置via阵列。 正文： 方式一： 当把板子都布局，布好线后，需要铺铜时，P-&gt;G，然后选择铺铜的区域，围绕板子四周画一个矩形，画好后，鼠标右键2下，铺铜。 铺好后手动去除板子四个角外部的铜，如下图所示，选择Polygon Pour Cutout，然后把不想要的铜圈起来即可。选中铜皮，将其设置为连接到GND net上。 上面只是铺好了top layer的铜皮，下面来铺bottom layer的。选中top layer的铜皮，ctrl+c，然后鼠标左键点击一下我们设置好的origin point，切换到bottom layer，选择special paste，然后对话框设置一下，之后再选择一次origin point即可。之后可以再按照上述方式去除一下keep out外面的死铜。当然也可以在铺铜的设置选项里勾选“去除死铜”，但是这样会把板子里面的死铜也给去除掉（一般需要去除死铜），读者根据需要来选择吧。 方式二： 当需要画多层板时，有时需要在每一层都铺上铜（前提是内电层是middle layer，不是plane，因为middle layer可以进行铺铜）。按照下面的方法操作： 先在top layer铺上铜，按快捷键T-G-M进入Polygon Pour Manager，在这里面批量添加铺铜，并设置各个层的Net和名称。 注意：放设置完每一层的Properties信息，想要Apply一下（不用点击OK)，然后再在此窗口中点击Repour操作，否则会出现自己修改完了信息，但是铺铜时发现未识别到刚修改的那一层。 放置via阵列： 下面开始放置一些小的via阵列，首先将“铜皮”隐藏，放置干扰我们视野。方法：ctrl+D，在view configuration窗口中隐藏Polygons。 开始放置via阵列： 先设置一下Net为GND，然后去勾选左上角的Constrain Area来选择放置的区域，根据需要设置间距，大小之类的参数。 放好via阵列的样子： 之后将铜皮取消隐藏即可，并布置丝印层。","categories":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/categories/PCB/"}],"tags":[{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/tags/PCB/"},{"name":"AD软件","slug":"AD软件","permalink":"https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"}]},{"title":"ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中","slug":"Blog/ZYNQ/ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中","date":"2021-10-10T05:26:01.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/10/Blog/ZYNQ/ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/ZYNQ/ZYNQ%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABOOT.bin%EF%BC%8Cfsbl%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E7%A8%8B%E5%BA%8F%E5%9B%BA%E5%8C%96%E5%88%B0%E6%9D%BF%E4%B8%8A%E7%9A%84QSPI_Flash%E4%B8%AD/","excerpt":"","text":"1、环境介绍： ZYNQ-7000 MZ7XA板卡 vivado 2020.1 vitis 2020.1 2、正文： 首先介绍一下镜像这个概念，下面是百度百科中的解释： 所谓镜像文件其实和rar ZIP压缩包类似，它将特定的一系列文件按照一定的格式制作成单一的文件，以方便用户下载和使用，例如一个操作系统、游戏等。它最重要的特点是可以被特定的软件识别并可直接刻录到光盘上。其实通常意义上的镜像文件可以再扩展一下，在镜像文件中可以包含更多的信息。比如说系统文件、引导文件、分区表信息等，这样镜像文件就可以包含一个分区甚至是一块硬盘的所有信息。 额，理解了镜像的概念，接下来以在vivado vitis工程中的实际操作中学习BOOT.bin fsbl等内容。 vivado工程方面： 配置一下PS，生成一个HDL Wrapper.v，然后在Wrapper.v文件中加入一段4bit流水灯的代码，代码如下： 然后生成.bit文件，导出xsa文件，接下在切换到vitis开发。 vitis工程方面： 新建一个硬件工程，命名为run_led_hw_platform 指定刚vivado生成的xsa文件，上图中记得勾选Generate boot components，这个会在生成的硬件工程中产生一个zynq_fsbl文件夹，打开会发现有一堆fsbl相关的源文件，编译一下整个硬件工程，就会在下面图二的1处产生一个fsbl.elf文件。 接下来新建一个helloWorld的应用工程，命名为helloWorld，并编译一下。 接下来讲一下当我们成功固化程序到flash中后，ZYNQ板子启动的过程。 ZYNQ内部的BootROM存储有一段在CPU复位后固定执行的代码。称为stage-0启动代码。（这个ROM中的代码，掉电不丢失） 这段代码用来配置一个ARM CPU和一些必要外设，从而能从一个启动设备中获取FSBL（first stage boot loader）执行。BootROM是一个ROM，不可写，PL的配置不是通过BootROM实现的。BootROM不能使用DDR和SCU，因为它们还没有初始化。 BOOT.bin是一个镜像文件，我们这里是将它存储在外部的QSPI-Flash中，BOOT.bin包含有fsbl.elf，PL部分配置文件（.bit)，应用工程的可执行二进制文件（helloWorld.elf文件） 当BootROM把flash中BOOT.bin中的fsbl装载到OCM后，接下来就开始执行fsbl了。 fsbl负责下面这些： 对于基于zynq的嵌入式Linux系统，BootROM引导启动FSBL，FSBL引导启动U-Boot，U-boot引导启动Linux内核。 理解了上面这些，接下来继续创建Boot Image。 上图中出现了好多文件，它们的关系详情请参考ug821的boot章节，这个BOOT.bin就是需要制作出来的镜像文件，它里面包含有下面fsbl.elf，run_lef.bit，helloWorld.elf文件。至于上面的helloWorld.bif文件，它是一个Boot Image Format 文件，用于制作BOOT.bin用的。 制作好BOOT.bin后，接下来把它烧录到QSPI-Flash中： 在consol窗口中出现一系列消息后，就成功了。 此时打开一个串口窗口，对板子重新上电，可看到流水灯在闪烁，串口打印成功。 3、参考文献： 米联客教程 ZYNQ_FSBL学习 zynq中的BootROM","categories":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/categories/ZYNQ/"}],"tags":[{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/tags/ZYNQ/"}]},{"title":"Arduino舒适的开发环境搭建：vscode+arduino插件","slug":"Blog/Arduino/Arduino舒适的开发环境搭建_vscode_arduino插件","date":"2021-10-10T04:26:01.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/10/Blog/Arduino/Arduino舒适的开发环境搭建_vscode_arduino插件/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_arduino%E6%8F%92%E4%BB%B6/","excerpt":"","text":"板卡：Arduino uno OS: win10 开发环境：vscode + arduino插件 工程作用：可以实现arduino的LED闪烁。 安装Arduino插件： 目录结构： 1、在vscode的用户配置文件settings.json中加入下面这些内容，用来对arduino插件做全局的默认配置： 1234567891011121314151617181920212223242526272829&quot;arduino.path&quot;: &quot;G:\\\\Arduino&quot;, // arduino IDE安装的位置&quot;arduino.commandPath&quot;: &quot;arduino_debug.exe&quot;, //这是一个上述位置中的exe文件&quot;C_Cpp.default.browse.path&quot;: [ &quot;G:\\\\Arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;, &quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;],&quot;C_Cpp.default.includePath&quot;: [ //头文件引用路径 &quot;G:\\\\Arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;, &quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;, &quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;],&quot;arduino.logLevel&quot;: &quot;info&quot;,&quot;arduino.allowPDEFiletype&quot;: false,&quot;arduino.enableUSBDetection&quot;: true,&quot;arduino.disableTestingOpen&quot;: false,&quot;arduino.skipHeaderProvider&quot;: false,&quot;arduino.disableIntelliSenseAutoGen&quot;: true,&quot;arduino.additionalUrls&quot;: [ &quot;https://raw.githubusercontent.com/VSChina/azureiotdevkit_tools/master/package_azureboard_index.json&quot;, &quot;http://arduino.esp8266.com/stable/package_esp8266com_index.json&quot;],&quot;arduino.defaultBaudRate&quot;: 115200, 2、在.vscode文件夹下新建一个c_cpp_settings.json，并添加下面内容： 上述中的includePath是需要认真设置的，这个不设置也行，在编写源文件时，会在#include的头文件下面出现红色波浪线，提示找不到文件之类的，例如下方这个。此时点击Quick Fix，把路径添加上就可以了，新添加的路径会自动出现在上方c_cpp_settings.json中的includePath中。 3、在.vscode文件夹下新建一个arduino.json，并添加下面内容： 12345678&#123; &quot;sketch&quot;: &quot;appMain.ino&quot;, &quot;port&quot;: &quot;COM10&quot;, &quot;board&quot;: &quot;arduino:avr:uno&quot;, &quot;output&quot;: &quot;./build&quot;, &quot;debugger&quot;: &quot;jlink&quot;, &quot;intelliSenseGen&quot;: &quot;global&quot;&#125; 4、编写源文件 请在github中下载。 5、编译烧录 写好源文件后，点击图中的A是编译，B是烧录，C是修改串口号，D是c_cpp_settings.json中的&quot;name&quot; 6、搞定 工程文件有需要的话，请到Github中下载 另外，vscode-arduino官方的文档看这个链接。","categories":[{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"}]},{"title":"如何将阿里云的域名绑定到Github Page","slug":"Blog/Hexo搭建个人网站/如何将阿里云的域名绑定到Github_Page","date":"2021-10-10T04:26:01.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/10/Blog/Hexo搭建个人网站/如何将阿里云的域名绑定到Github_Page/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/10/Blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E5%A6%82%E4%BD%95%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0Github_Page/","excerpt":"","text":"1、阿里云注册一个域名 2、设置域名解析 3、添加记录，将域名指向自己的Github Page 首先获得自己的Github Page的IP地址。 1ping username.github.io 然后添加一条记录，并按照下图所示设置，A处要填上刚获得的Github Page的IP地址。（这些相关知识点参见链接） 然后再新建一条记录，记录值要填自己的github.io 设置好了后，应该是看到下面这样，需要看到两记录的状态是正常的才行： 4、在Github page中设置 在自己的username.github.io界面，点击Setting，然后直接往下翻，找到GitHub Pages，并进入设置页面。 然后在下面设置域名，并勾选Enforce HTTPS（这个是有加密的，更好些，这样之后自己的网站链接前面是https开头的，如果这里是灰状勾选不了，是因为设置时有问题导致的。），A处就是自己的网站名字。 5、在hexoSite工程文件中设置 在source文件夹下新建一个名称为CNAME的文件，无后缀。并键入下面这样的东西（记得修改为自己的）： 12www.zhaomengfei.xyzzhaomengfei.xyz 6、然后就是正常的hexo的命令操作 12hexo cleanhexo d -g 7、最终效果 这样，以后在浏览器中键入username.github.io zhaomengfei.xyz www.zhaomengfei.xyz时都会自动跳到https://www.zhaomengfei.xyz 的。 搞定~","categories":[{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/categories/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.zhaomengfei.xyz/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","permalink":"https://www.zhaomengfei.xyz/tags/Github-Page/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}]},{"title":"Arduino舒适的开发环境搭建：vscode+PlatformIO","slug":"Blog/Arduino/Arduino舒适的开发环境搭建_vscode_platformio","date":"2021-10-09T15:26:01.000Z","updated":"2022-05-07T08:07:35.000Z","comments":true,"path":"2021/10/09/Blog/Arduino/Arduino舒适的开发环境搭建_vscode_platformio/","link":"","permalink":"https://www.zhaomengfei.xyz/2021/10/09/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_platformio/","excerpt":"","text":"一、前言 Arduino自带的IDE用在小的工程时还可以应付，但是面对大型工程时，就比较鸡肋了。本着想愉快的编写Arduinio的代码，让我们开始“折腾”吧~ 开发环境： win10 vscode + PlatformIO插件 Arduino 官方的IDE 1.8.16 手头有一个Arduino UNO板卡 二、开始 首先下载、安装vscode。然后安装platformio插件，如下图： 这个插件在使用IDE新建工程时，有些bug，就是特别慢，网上说是需要从github上下载一些东西，所以就很慢，而国内在使用github时有时候就是挺慢的。不过还是想用这么香的东西，肿么办呢？且听我慢慢道来。 使用IDE方式新建helloworld工程： 首先点击如图所示的，更新一下pio core，下面是官方的介绍（官方文档链接），小伙伴记得仔细看官方文档呦。 然后点击下面的New Project。 这里在选择工程路径时，有时加载会有些慢。然后点击底部的Finish，之后会加载一段时间，这个时间真是很奇怪，快时只需要几秒钟，慢时一个小时也搞不定。慢时我后面会讲如何应对。 之后窗口中会出现两个相同的文件夹，需要右击任意删除一个（点击Remove folder from workspace）。之后save as一个workspace。 处理之后一定要确保左侧的工作空间窗口中像上图这样，即一个workspace下面只有一个helloworld4的工作目录。如果是像下面这样嵌套的路径结构或者其他的结构，后面在编写源文件时，可能会出现头文件引用找不到的问题，即例如右侧B处的Serial下面有个红色波浪线，提示找不到该玩意儿在哪里。。。 而这点是vscode中c/c++插件的一个bug（详情参见此链接），只要想办法绕过此bug即可。 当然若实在是头文件引用错误的话，可以暴力点，关闭所有的错误提示，从此再无红色波浪线（设置看此链接）。 编写源代码： 下面是让LED灯闪烁，并发送数据到串口。 main.cpp: 12345678910111213141516171819#include &lt;Arduino.h&gt;#define onboard 13void setup()&#123; // put your setup code here, to run once: pinMode(onboard, OUTPUT); Serial.begin(9600);&#125;void loop()&#123; // put your main code here, to run repeatedly: digitalWrite(onboard, LOW); delay(1000); digitalWrite(onboard, HIGH); delay(1000); Serial.println(&quot;Hello World!&quot;);&#125; 对了，arduino的代码其实就是C++代码，当然可以分成很多个子.cpp，.h来编写代码，参考链接1， 链接2。 编译，烧录： 上图中A是编译，B是烧录，C是打开串口工具。 下面是串口中的数据： 搞定！ 若通过IDE方式来创建工程，很慢的话，请接着往下看 首先看下这个链接。 可以通过CLI的方式来创建工程，用vscode打开一个空文件夹，然后在terminal中敲入 pio project init --board uno，然后会在vscode中释放一堆一样的文件夹结构（这个过程会快一些吧），然后打开这个platformio工程，此时看下platformio.ini文件中是否正确，如下所示。 现在新建并编写自己的源文件即可。 最后：","categories":[{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://www.zhaomengfei.xyz/tags/PlatformIO/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/categories/Python/"},{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/categories/PCB/"},{"name":"Pycharm","slug":"Python/Pycharm","permalink":"https://www.zhaomengfei.xyz/categories/Python/Pycharm/"},{"name":"Linux","slug":"Linux","permalink":"https://www.zhaomengfei.xyz/categories/Linux/"},{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/categories/softwares/"},{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/categories/ZYNQ/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/categories/vscode/"},{"name":"Arduino","slug":"vscode/Arduino","permalink":"https://www.zhaomengfei.xyz/categories/vscode/Arduino/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/categories/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.zhaomengfei.xyz/tags/Python/"},{"name":"PCB","slug":"PCB","permalink":"https://www.zhaomengfei.xyz/tags/PCB/"},{"name":"AD软件","slug":"AD软件","permalink":"https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://www.zhaomengfei.xyz/tags/Pycharm/"},{"name":"Linux","slug":"Linux","permalink":"https://www.zhaomengfei.xyz/tags/Linux/"},{"name":"softwares","slug":"softwares","permalink":"https://www.zhaomengfei.xyz/tags/softwares/"},{"name":"ZYNQ","slug":"ZYNQ","permalink":"https://www.zhaomengfei.xyz/tags/ZYNQ/"},{"name":"Arduino","slug":"Arduino","permalink":"https://www.zhaomengfei.xyz/tags/Arduino/"},{"name":"vscode","slug":"vscode","permalink":"https://www.zhaomengfei.xyz/tags/vscode/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.zhaomengfei.xyz/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","permalink":"https://www.zhaomengfei.xyz/tags/Github-Page/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.zhaomengfei.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"},{"name":"PlatformIO","slug":"PlatformIO","permalink":"https://www.zhaomengfei.xyz/tags/PlatformIO/"}]}