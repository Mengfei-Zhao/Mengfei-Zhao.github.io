[{"title":"Arduino舒适的开发环境搭建：vscode+arduino插件","url":"/2021/10/10/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_arduino%E6%8F%92%E4%BB%B6/","content":"<hr>\n<ul>\n<li>板卡：Arduino uno</li>\n<li>OS: win10</li>\n<li>开发环境：vscode + arduino插件</li>\n<li>工程作用：可以实现arduino的LED闪烁。</li>\n</ul>\n<hr>\n<p>安装Arduino插件：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007192010599.png\" alt=\"image-20211007192010599\" style=\"zoom:70%;\" />\n<p>目录结构：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007192231896.png\" alt=\"image-20211007192231896\" style=\"zoom:67%;\" />\n<h3 id=\"1、在vscode的用户配置文件settings-json中加入下面这些内容，用来对arduino插件做全局的默认配置：\">1、在vscode的用户配置文件settings.json中加入下面这些内容，用来对arduino插件做全局的默认配置：</h3>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;arduino.path&quot;</span>: <span class=\"string\">&quot;G:\\\\Arduino&quot;</span>, <span class=\"comment\">// arduino IDE安装的位置</span></span><br><span class=\"line\"><span class=\"string\">&quot;arduino.commandPath&quot;</span>: <span class=\"string\">&quot;arduino_debug.exe&quot;</span>, <span class=\"comment\">//这是一个上述位置中的exe文件</span></span><br><span class=\"line\"><span class=\"string\">&quot;C_Cpp.default.browse.path&quot;</span>: [ </span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">&quot;C_Cpp.default.includePath&quot;</span>: [ <span class=\"comment\">//头文件引用路径</span></span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\avr\\\\include\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\tools\\\\avr\\\\lib\\\\gcc\\\\avr\\\\7.3.0\\\\include\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\cores\\\\arduino\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\Arduino\\\\hardware\\\\arduino\\\\avr\\\\variants\\\\standard\\\\**&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;G:\\\\ArduinoPrj\\\\libraries\\\\**&quot;</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.logLevel&quot;</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.allowPDEFiletype&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.enableUSBDetection&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.disableTestingOpen&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.skipHeaderProvider&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.disableIntelliSenseAutoGen&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.additionalUrls&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://raw.githubusercontent.com/VSChina/azureiotdevkit_tools/master/package_azureboard_index.json&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;http://arduino.esp8266.com/stable/package_esp8266com_index.json&quot;</span></span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">&quot;arduino.defaultBaudRate&quot;</span>: <span class=\"number\">115200</span>,</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、在-vscode文件夹下新建一个c-cpp-settings-json，并添加下面内容：\">2、在.vscode文件夹下新建一个c_cpp_settings.json，并添加下面内容：</h3>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008094940783.png\" alt=\"image-20211008094940783\" style=\"zoom:80%;\" />\n<p>上述中的includePath是需要认真设置的，这个不设置也行，在编写源文件时，会在#include的头文件下面出现红色波浪线，提示找不到文件之类的，例如下方这个。此时点击Quick Fix，把路径添加上就可以了，新添加的路径会自动出现在上方c_cpp_settings.json中的includePath中。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008095347411.png\" alt=\"image-20211008095347411\" style=\"zoom:80%;\" />\n<h3 id=\"3、在-vscode文件夹下新建一个arduino-json，并添加下面内容：\">3、在.vscode文件夹下新建一个arduino.json，并添加下面内容：</h3>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;sketch&quot;</span>: <span class=\"string\">&quot;appMain.ino&quot;</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;port&quot;</span>: <span class=\"string\">&quot;COM10&quot;</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;board&quot;</span>: <span class=\"string\">&quot;arduino:avr:uno&quot;</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;output&quot;</span>: <span class=\"string\">&quot;./build&quot;</span>, </span><br><span class=\"line\">    <span class=\"attr\">&quot;debugger&quot;</span>: <span class=\"string\">&quot;jlink&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;intelliSenseGen&quot;</span>: <span class=\"string\">&quot;global&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、编写源文件\">4、编写源文件</h3>\n<p>请在<a href=\"https://github.com/Mengfei-Zhao/utility\">github</a>中下载。</p>\n<h3 id=\"5、编译烧录\">5、编译烧录</h3>\n<p>写好源文件后，点击图中的A是编译，B是烧录，C是修改串口号，D是c_cpp_settings.json中的&quot;name&quot;</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008100422545.png\" alt=\"image-20211008100422545\"></p>\n<h3 id=\"6、搞定\">6、搞定</h3>\n<p><strong>工程文件有需要的话，请到<a href=\"https://github.com/Mengfei-Zhao/utility\">Github</a>中下载</strong></p>\n<p><strong>另外，vscode-arduino官方的文档看这个<a href=\"https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino\">链接</a>。</strong></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/点赞.gif\" alt=\"点赞\" style=\"zoom:50%;\" />\n","categories":["vscode","Arduino"],"tags":["Arduino","vscode"]},{"title":"如何将阿里云的域名绑定到Github Page","url":"/2021/10/10/Blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E5%A6%82%E4%BD%95%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0Github_Page/","content":"<h3 id=\"1、阿里云注册一个域名\">1、阿里云注册一个域名</h3>\n<h3 id=\"2、设置域名解析\">2、设置域名解析</h3>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010150234294.png\" alt=\"image-20211010150234294\" style=\"zoom:67%;\" />\n<h3 id=\"3、添加记录，将域名指向自己的Github-Page\">3、添加记录，将域名指向自己的Github Page</h3>\n<p>首先获得自己的Github Page的IP地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping username.github.io</span><br></pre></td></tr></table></figure>\n<p>然后添加一条记录，并按照下图所示设置，A处要填上刚获得的Github Page的IP地址。（这些相关知识点参见<a href=\"https://blog.csdn.net/qq_29232943/article/details/52786603\">链接</a>）</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151013790.png\" alt=\"image-20211010151013790\" style=\"zoom:80%;\" />\n<p>然后再新建一条记录，<a href=\"http://xn--github-ow0ju27cvwlwldnr2gou2awvus5g.io\">记录值要填自己的github.io</a></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151316911.png\" alt=\"image-20211010151316911\" style=\"zoom:80%;\" />\n<p>设置好了后，应该是看到下面这样，需要看到两记录的状态是正常的才行：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151518680.png\" alt=\"image-20211010151518680\" style=\"zoom:80%;\" />\n<h3 id=\"4、在Github-page中设置\">4、在Github page中设置</h3>\n<p>在自己的username.github.io界面，点击Setting，然后直接往下翻，找到GitHub Pages，并进入设置页面。</p>\n<p>然后在下面设置域名，并勾选Enforce HTTPS（这个是有加密的，更好些，这样之后自己的网站链接前面是https开头的，如果这里是灰状勾选不了，是因为设置时有问题导致的。），A处就是自己的网站名字。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010152204074.png\" alt=\"image-20211010152204074\" style=\"zoom:80%;\" />\n<h3 id=\"5、在hexoSite工程文件中设置\">5、在hexoSite工程文件中设置</h3>\n<p>在source文件夹下新建一个名称为CNAME的文件，无后缀。并键入下面这样的东西（记得修改为自己的）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">www.zhaomengfei.xyz</span></span><br><span class=\"line\"><span class=\"string\">zhaomengfei.xyz</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6、然后就是正常的hexo的命令操作\">6、然后就是正常的hexo的命令操作</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、最终效果\">7、最终效果</h3>\n<p>这样，以后在浏览器中键入<code>username.github.io</code>       <code>zhaomengfei.xyz</code>       <code>www.zhaomengfei.xyz时都会自动跳到</code><a href=\"https://www.zhaomengfei.xyz\">https://www.zhaomengfei.xyz</a> 的。</p>\n<p>搞定~</p>\n","categories":["个人网站"],"tags":["Hexo","Github Page","个人网站"]},{"title":"Arduino舒适的开发环境搭建：vscode+PlatformIO","url":"/2021/10/09/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_platformio/","content":"<h2 id=\"一、前言\">一、前言</h2>\n<p>Arduino自带的IDE用在小的工程时还可以应付，但是面对大型工程时，就比较鸡肋了。本着想愉快的编写Arduinio的代码，让我们开始“折腾”吧~</p>\n<p><strong>开发环境：</strong></p>\n<ul>\n<li>win10</li>\n<li>vscode + PlatformIO插件</li>\n<li>Arduino 官方的IDE  1.8.16</li>\n<li>手头有一个Arduino UNO板卡</li>\n<li>该博客中的某些链接需要梯子呦</li>\n</ul>\n<h2 id=\"二、开始\">二、开始</h2>\n<p>首先下载、安装vscode。然后安装platformio插件，如下图：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007173651871.png\" alt=\"image-20211007173650230\" style=\"zoom:70%;\" />\n<p>这个插件在使用IDE新建工程时，有些bug，就是特别慢，网上说是需要从github上下载一些东西，所以就很慢，而国内在使用github时有时候就是挺慢的。不过还是想用这么香的东西，肿么办呢？且听我慢慢道来。</p>\n<h3 id=\"使用IDE方式新建helloworld工程：\">使用IDE方式新建helloworld工程：</h3>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174311073.png\" alt=\"image-20211007174311073\" style=\"zoom:80%;\" />\n<p>首先点击如图所示的，更新一下pio core，下面是官方的介绍（<a href=\"!%5Bimage-20211007174534039%5D(C:/Users/meng/AppData/Roaming/Typora/typora-user-images/image-20211007174534039.png)!%5Bimage-20211007174534039%5D(C:/Users/meng/AppData/Roaming/Typora/typora-user-images/image-20211007174534039.png)\">官方文档链接</a>），小伙伴记得仔细看官方文档呦。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174451940.png\" alt=\"image-20211007174451940\"></p>\n<p>然后点击下面的New Project。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174714097.png\" alt=\"image-20211007174714097\"></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174912757.png\" alt=\"image-20211007174912757\" style=\"zoom:80%;\" />\n<p>这里在选择工程路径时，有时加载会有些慢。然后点击底部的Finish，之后会加载一段时间，这个时间真是很奇怪，快时只需要几秒钟，慢时一个小时也搞不定。慢时我后面会讲如何应对。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007175216973.png\" alt=\"image-20211007175216973\"></p>\n<p>之后窗口中会出现两个相同的文件夹，需要右击任意删除一个（点击Remove folder from workspace）。之后save as一个workspace。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007175724408.png\" alt=\"image-20211007175724408\"></p>\n<p>处理之后一定要确保左侧的工作空间窗口中像上图这样，即一个workspace下面只有一个helloworld4的工作目录。如果是像下面这样嵌套的路径结构或者其他的结构，后面在编写源文件时，可能会出现头文件引用找不到的问题，即例如右侧B处的Serial下面有个红色波浪线，提示找不到该玩意儿在哪里。。。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007180030141.png\" alt=\"image-20211007180030141\" style=\"zoom:80%;\" />\n<p>而这点是vscode中c/c++插件的一个bug（详情参见此<a href=\"https://community.platformio.org/t/include-errors-detected/5858\">链接</a>），只要想办法绕过此bug即可。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007180741703.png\" alt=\"image-20211007180741703\"></p>\n<p>当然若实在是头文件引用错误的话，可以暴力点，关闭所有的错误提示，从此再无红色波浪线（设置看此<a href=\"https://blog.csdn.net/HermitSun/article/details/103627053#:~:text=%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E4%BA%86%E3%80%82-,%E5%90%AF%E7%94%A8%E6%96%B9%E6%B3%95%E6%98%AFctrl%2Bshift%2Bp%20%E6%90%9C%E7%B4%A2%E5%90%AF%E7%94%A8%E9%94%99%E8%AF%AF%E6%B3%A2%E5%BD%A2,%E6%9B%B2%E7%BA%BF%EF%BC%8C%E6%89%93%E5%BC%80%E5%B0%B1%E8%A1%8C...&amp;text=%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0%E6%B3%A2%E5%BD%A2%E6%9B%B2%E7%BA%BF%EF%BC%9A%20%E8%A7%A3%E5%86%B3,%E6%94%B9%E4%B8%BAtrue%E5%8D%B3%E5%8F%AF%E3%80%82\">链接</a>）。</p>\n<p><strong>编写源代码：</strong></p>\n<p>下面是让LED灯闪烁，并发送数据到串口。</p>\n<p>main.cpp:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Arduino.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> onboard 13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your setup code here, to run once:</span></span><br><span class=\"line\">  <span class=\"built_in\">pinMode</span>(onboard, OUTPUT);</span><br><span class=\"line\">  Serial.<span class=\"built_in\">begin</span>(<span class=\"number\">9600</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// put your main code here, to run repeatedly:</span></span><br><span class=\"line\">  <span class=\"built_in\">digitalWrite</span>(onboard, LOW);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"built_in\">digitalWrite</span>(onboard, HIGH);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  Serial.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对了，arduino的代码其实就是C++代码，当然可以分成很多个子.cpp，.h来编写代码，参考<a href=\"https://www.eefocus.com/liusk2014/blog/14-05/303449_fe78d.html\">链接1</a>， <a href=\"https://blog.csdn.net/codalion/article/details/86014560\">链接2</a>。</p>\n<p><strong>编译，烧录：</strong></p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007181612585.png\" alt=\"image-20211007181612585\"></p>\n<p>上图中A是编译，B是烧录，C是打开串口工具。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007181950115.png\" alt=\"image-20211007181950115\" style=\"zoom:80%;\" />\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007182127853.png\" alt=\"image-20211007182127853\" style=\"zoom:80%;\" />\n<p>下面是串口中的数据：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007182330671.png\" alt=\"image-20211007182330671\" style=\"zoom:80%;\" />\n<p><strong>搞定！</strong></p>\n<h3 id=\"若通过IDE方式来创建工程，很慢的话，请接着往下看\">若通过IDE方式来创建工程，很慢的话，请接着往下看</h3>\n<p>首先看下这个<a href=\"https://community.platformio.org/t/too-slow-to-create-a-new-project/18259\">链接</a>。</p>\n<p>可以通过CLI的方式来创建工程，用vscode打开一个空文件夹，然后在terminal中敲入 <code>pio project init --board uno</code>，然后会在vscode中释放一堆一样的文件夹结构（<em>这个过程会快一些吧</em>），然后打开这个platformio工程，此时看下platformio.ini文件中是否正确，如下所示。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007183715444.png\" alt=\"image-20211007183715444\" style=\"zoom:80%;\" />\n<p>现在新建并编写自己的源文件即可。</p>\n<p>ps: 给个油管的PIO开发arduino的<a href=\"https://www.youtube.com/watch?v=lXchL3hpDO4&amp;ab_channel=JanPenninkhof\">教程</a>。</p>\n<p><strong>最后：</strong></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/点赞.gif\" alt=\"点赞\" style=\"zoom: 50%;\" />\n","categories":["vscode","Arduino"],"tags":["Arduino","vscode","PlatformIO"]},{"title":"AD软件_PCB板的四个角放置通孔和圆弧keepout线的快捷方法","url":"/2021/10/15/Blog/PCB/AD_PCB%E6%9D%BF%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E6%94%BE%E7%BD%AE%E9%80%9A%E5%AD%94%E5%92%8C%E5%9C%86%E5%BC%A7keepout%E7%BA%BF%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E6%B3%95/","content":"<h2 id=\"前言：\">前言：</h2>\n<p><strong>环境介绍：</strong> AD20</p>\n<h2 id=\"正文：\">正文：</h2>\n<p>在开始画PCB时，先用keepout线画一个矩形，把origin点设置到角落里。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015224400882.png\" alt=\"image-20211015224400882\" style=\"zoom:50%;\" />\n<p>然后放置一个通孔（用于安装螺丝，来固定板卡），并设置通孔的坐标为一个（-3.3mm, 3.3mm），这个距离自己掌握，但必须x,y绝对值相等。</p>\n<p>选中通孔，<code>ctrl+c</code>，出来绿色十字架时，点一下origin（以Origin）为复制参考点。点击另外的三个角，<code>ctrl+v</code>，出现绿色十字架时，按下空格来旋转，然后点击板卡的顶点。搞定！</p>\n<p>之后在四个角画keepout圆弧，选择圆弧工具：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225053567.png\" alt=\"image-20211015225053567\" style=\"zoom:68%;\" />\n<p>出现绿色十字架，点击一下通孔的圆心：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225331348.png\" alt=\"image-20211015225331348\" style=\"zoom:50%;\" />\n<p>然后点击<strong>大圆</strong>与<strong>矩形边</strong>相切的位置，如下图（我们只需要右下角的<strong>四分之一圆弧</strong>）：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225543912.png\" alt=\"image-20211015225543912\" style=\"zoom:50%;\" />\n<p>之后删除多余的矩形的<strong>角</strong>，就得到这样的了。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225807361.png\" alt=\"image-20211015225807361\" style=\"zoom:50%;\" />\n<p>然后选中这个<strong>四分之一圆弧</strong>，以通孔圆心为参考点，复制，粘贴处其余3个角。</p>\n<p>搞定！</p>\n","categories":["PCB"],"tags":["PCB","AD软件"]},{"title":"ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中","url":"/2021/10/10/Blog/ZYNQ/ZYNQ%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABOOT.bin%EF%BC%8Cfsbl%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E7%A8%8B%E5%BA%8F%E5%9B%BA%E5%8C%96%E5%88%B0%E6%9D%BF%E4%B8%8A%E7%9A%84QSPI_Flash%E4%B8%AD/","content":"<h2 id=\"1、环境介绍：\">1、环境介绍：</h2>\n<ul>\n<li>ZYNQ-7000 MZ7XA板卡</li>\n<li>vivado 2020.1</li>\n<li>vitis 2020.1</li>\n</ul>\n<h2 id=\"2、正文：\">2、正文：</h2>\n<p>首先介绍一下<a href=\"https://baike.baidu.com/item/%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/101053?fr=aladdin\">镜像</a>这个概念，下面是百度百科中的解释：</p>\n<blockquote>\n<p>所谓镜像文件其实和rar ZIP压缩包类似，它将特定的一系列文件按照一定的格式制作成单一的文件，以方便用户下载和使用，例如一个操作系统、游戏等。它最重要的特点是可以被特定的软件识别并可直接刻录到<a href=\"https://baike.baidu.com/item/%E5%85%89%E7%9B%98/170215\">光盘</a>上。其实通常意义上的镜像文件可以再扩展一下，在镜像文件中可以包含更多的信息。比如说系统文件、<a href=\"https://baike.baidu.com/item/%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6/659617\">引导文件</a>、<a href=\"https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E8%A1%A8/215102\">分区表</a>信息等，这样镜像文件就可以包含一个分区甚至是一块硬盘的所有信息。</p>\n</blockquote>\n<p>额，理解了镜像的概念，接下来以在vivado vitis工程中的实际操作中学习BOOT.bin  fsbl等内容。</p>\n<h3 id=\"vivado工程方面：\">vivado工程方面：</h3>\n<p>配置一下PS，生成一个HDL Wrapper.v，然后在Wrapper.v文件中加入一段4bit流水灯的代码，代码如下：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002162341338.png\" alt=\"image-20211002162341338\" style=\"zoom:67%;\" />\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002162649052.png\" alt=\"image-20211002162649052\" style=\"zoom:70%;\" />\n<p>然后生成.bit文件，导出xsa文件，接下在切换到vitis开发。</p>\n<h3 id=\"vitis工程方面：\">vitis工程方面：</h3>\n<p>新建一个硬件工程，命名为<code>run_led_hw_platform</code></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002163328456.png\" alt=\"image-20211002163328456\" style=\"zoom:67%;\" />\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002163622228.png\" alt=\"image-20211002163622228\" style=\"zoom:80%;\" />\n<p>指定刚vivado生成的xsa文件，上图中记得勾选Generate boot components，这个会在生成的硬件工程中产生一个zynq_fsbl文件夹，打开会发现有一堆fsbl相关的源文件，编译一下整个硬件工程，就会在下面图二的1处产生一个fsbl.elf文件。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164114451.png\" alt=\"image-20211002164114451\"></p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164030549.png\" alt=\"image-20211002164030549\"></p>\n<p>接下来新建一个helloWorld的应用工程，命名为<code>helloWorld</code>，并编译一下。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164344390.png\" alt=\"image-20211002164344390\" style=\"zoom:80%;\" />\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164607517.png\" alt=\"image-20211002164607517\"></p>\n<p>接下来讲一下当我们成功固化程序到flash中后，ZYNQ板子启动的过程。</p>\n<ul>\n<li>\n<p>ZYNQ内部的BootROM存储有一段在CPU复位后固定执行的代码。称为stage-0启动代码。（这个ROM中的代码，掉电不丢失）</p>\n</li>\n<li>\n<p>这段代码用来配置一个ARM CPU和一些必要外设，从而能从一个启动设备中获取FSBL（first stage boot loader）执行。BootROM是一个ROM，不可写，PL的配置不是通过BootROM实现的。BootROM不能使用DDR和SCU，因为它们还没有初始化。</p>\n</li>\n<li>\n<p>BOOT.bin是一个镜像文件，我们这里是将它存储在外部的QSPI-Flash中，BOOT.bin包含有fsbl.elf，PL部分配置文件（.bit)，应用工程的可执行二进制文件（helloWorld.elf文件）</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/20200626232927148.png\" alt=\" \"></p>\n</li>\n<li>\n<p>当BootROM把flash中BOOT.bin中的fsbl装载到OCM后，接下来就开始执行fsbl了。</p>\n</li>\n<li>\n<p>fsbl负责下面这些：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002172924391.png\" alt=\"image-20211002172924391\" style=\"zoom:80%;\" />\n<p>对于基于zynq的嵌入式Linux系统，BootROM引导启动FSBL，FSBL引导启动U-Boot，U-boot引导启动Linux内核。</p>\n</li>\n</ul>\n<p>理解了上面这些，接下来继续创建Boot Image。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002171139341.png\" alt=\"image-20211002171139341\" style=\"zoom:80%;\" />\n<p>上图中出现了好多文件，它们的关系详情请参考ug821的boot章节，这个BOOT.bin就是需要制作出来的镜像文件，它里面包含有下面fsbl.elf，run_lef.bit，helloWorld.elf文件。至于上面的helloWorld.bif文件，它是一个Boot Image Format 文件，用于制作BOOT.bin用的。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002173806240.png\" alt=\"image-20211002173806240\"></p>\n<p>制作好BOOT.bin后，接下来把它烧录到QSPI-Flash中：</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174044195.png\" alt=\"image-20211002174044195\"></p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174241139.png\" alt=\"image-20211002174241139\" style=\"zoom:90%;\" />\n<p>在consol窗口中出现一系列消息后，就成功了。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174408697.png\" alt=\"image-20211002174408697\"></p>\n<p>此时打开一个串口窗口，对板子重新上电，可看到流水灯在闪烁，串口打印成功。</p>\n<p><img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174626648.png\" alt=\"image-20211002174626648\"></p>\n<h2 id=\"3、参考文献：\">3、参考文献：</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/jinry001/article/details/99693549\">米联客教程</a></li>\n<li><a href=\"https://blog.csdn.net/asd1147170607/article/details/106976572\">ZYNQ_FSBL学习</a></li>\n<li><a href=\"https://blog.csdn.net/qq_43445577/article/details/113846028\">zynq中的BootROM</a></li>\n</ul>\n","categories":["ZYNQ"],"tags":["ZYNQ"]},{"title":"AD软件方便的铺铜，并放置via阵列","url":"/2021/10/12/Blog/PCB/AD%E6%96%B9%E4%BE%BF%E7%9A%84%E9%93%BA%E9%93%9C%E6%96%B9%E6%B3%95_%E5%B9%B6%E6%94%BE%E7%BD%AEvia%E9%98%B5%E5%88%97/","content":"<h2 id=\"前言：\">前言：</h2>\n<p><strong>环境介绍：</strong>  AD20</p>\n<p><strong>目的：</strong>  将PCB两面都铺上GND的铜，并放置via阵列。</p>\n<h2 id=\"正文：\">正文：</h2>\n<h3 id=\"方式一：\">方式一：</h3>\n<p>当把板子都布局，布好线后，需要铺铜时，<code>P-&gt;G</code>，然后选择铺铜的区域，围绕板子四周画一个矩形，画好后，鼠标右键2下，铺铜。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012164220558.png\" alt=\"image-20211012164220558\" style=\"zoom:67%;\" />\n<p>铺好后手动去除板子四个角外部的铜，如下图所示，选择Polygon Pour Cutout，然后把不想要的铜圈起来即可。选中铜皮，将其设置为连接到GND net上。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012164527955.png\" alt=\"image-20211012164527955\" style=\"zoom:67%;\" />\n<p>上面只是铺好了top layer的铜皮，下面来铺bottom layer的。选中top layer的铜皮，ctrl+c，然后鼠标左键点击一下我们设置好的origin point，切换到bottom layer，选择special paste，然后对话框设置一下，之后再选择一次origin point即可。之后可以再按照上述方式去除一下keep out外面的死铜。当然也可以在铺铜的设置选项里勾选“去除死铜”，但是这样会把板子里面的死铜也给去除掉（一般需要去除死铜），读者根据需要来选择吧。</p>\n<img src=\"http://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165114319.png\" alt=\"image-20211012165114319\" style=\"zoom:80%;\" />\n<h3 id=\"方式二：\">方式二：</h3>\n<p>当需要画多层板时，有时需要在每一层都铺上铜（前提是内电层是middle layer，不是plane，因为middle layer可以进行铺铜）。按照下面的方法操作：</p>\n<ul>\n<li>先在top layer铺上铜，按快捷键<code>T-G-M</code>进入Polygon Pour Manager，在这里面批量添加铺铜，并设置各个层的Net和名称。</li>\n<li>注意：放设置完每一层的Properties信息，想要Apply一下（不用点击OK)，然后再在此窗口中点击Repour操作，否则会出现自己修改完了信息，但是铺铜时发现未识别到刚修改的那一层。</li>\n</ul>\n<img src=\"AD方便的铺铜方法_并放置via阵列.assets/image-20211017144145209.png\" alt=\"image-20211017144145209\" style=\"zoom:60%;\" />\n<h3 id=\"放置via阵列：\">放置via阵列：</h3>\n<p>下面开始放置一些小的via阵列，首先将“铜皮”隐藏，放置干扰我们视野。方法：ctrl+D，在view configuration窗口中隐藏Polygons。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165745814.png\" alt=\"image-20211012165745814\" style=\"zoom:80%;\" />\n<p>开始放置via阵列：</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165946987.png\" alt=\"image-20211012165946987\" style=\"zoom:80%;\" />\n<p>先设置一下Net为GND，然后去勾选左上角的Constrain Area来选择放置的区域，根据需要设置间距，大小之类的参数。</p>\n<img src=\"https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012170045704.png\" alt=\"image-20211012170045704\" style=\"zoom:80%;\" />\n<p>放好via阵列的样子：</p>\n<img src=\"http://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012170315201.png\" alt=\"image-20211012170315201\" style=\"zoom:67%;\" />\n<p>之后将铜皮取消隐藏即可，并布置丝印层。</p>\n","categories":["PCB"],"tags":["PCB","AD软件"]}]