<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mengfei&#39;s Personal Website</title>
  
  <subtitle>Blogs &amp; Notes</subtitle>
  <link href="https://www.zhaomengfei.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.zhaomengfei.xyz/"/>
  <updated>2022-05-07T08:07:35.000Z</updated>
  <id>https://www.zhaomengfei.xyz/</id>
  
  <author>
    <name>Mengfei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vmware安装ubuntu20的过程全纪录</title>
    <link href="https://www.zhaomengfei.xyz/2022/05/07/Blog/Linux/Vmware_ubuntu20_full_recodes/"/>
    <id>https://www.zhaomengfei.xyz/2022/05/07/Blog/Linux/Vmware_ubuntu20_full_recodes/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p><strong>目的：</strong>  在win10上面的vmware中安装ubuntu20.04的过程全纪录</p><h2 id="正文：">正文：</h2><h3 id="第一步">第一步</h3><p>安装vmware和ubuntu，参考<a href="https://zhuanlan.zhihu.com/p/141033713">这个博客</a>，记得看那篇博客下面的评论。</p><p>在进行第15步的时候，你会发现安装过程巨慢，这是因为使用的是国外的镜像，所以就慢。解决方法就是断网，先进入到系统再说，后面再更换镜像源，使用国内镜像，用命令行更新一下就好了。</p><h3 id="第二步">第二步</h3><p>装完系统后，第一件事情是更换为国内镜像源。</p><ol><li>原文件备份</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑源列表文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ol start="3"><li>将原来文件中内容全删掉，添加下面的内容（清华镜像源）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>运行 <code>sudo apt-get update </code>，目的是从服务器获取全部可用的、最新的软件包列表，并缓存到本地电脑。</li><li>运行 <code>sudo apt-get upgrade</code>，该命令会提示你更新软件包，更新就好了。关于 <code>apt-get update</code>和 <code>apt-get upgrade</code>的区别见这个<a href="https://blog.csdn.net/davidhzq/article/details/102671746#:~:text=%E5%9C%A8Ubuntu%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%82%B9,%E6%9B%B4%E6%96%B0%E5%8D%87%E7%BA%A7%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%E3%80%82">链接</a>。</li></ol><h3 id="第三步">第三步</h3><p>解决win10和ubuntu系统之间，无法使用跨平台copy/paste和drag/drop的问题。参考<a href="https://askubuntu.com/questions/691585/copy-paste-and-dragdrop-not-working-in-vmware-machine-with-ubuntu/824341#824341">这个</a>，看最高赞回答。</p><p>搞好了这一步，就可以实现win10的浏览器中google问题，然后把命令行粘贴到寄生系统ubuntu中。</p><h3 id="第四步">第四步</h3><p>挂载win10的文件夹到ubuntu中。</p><p>进行这一步的前提是进行了第三步中，安装vmware-tools的步骤。然后选择你想要把win10中哪个文件夹共享过去，依次点击左上角虚拟机 --》 设置 --》 选项 --》 共享文件夹 --》 总是启用 --》 添加要共享的文件夹。</p><p>设置好之后直接在ubuntu中执行 <code>vmware-hgfsclient</code>，来查看已经共享过来的文件夹有哪些，你应该可以看到刚设置好的文件夹。</p><p>对该共享文件夹进行测试，分别在win10和ubuntu中新建文件，看对方是否更新。</p><p>没问题的话，可以将 <code>/mnt/hgfs/share</code>的目录建立一个软连接，放到<code>/home/用户</code> 目录下。即执行 <code>ln -s /mnt/hgfs/share/ /home/用户名/share</code> 。注意：这几条命令中，读者明白意思就行，需要根据自己情况来修改某些词，当然这步建立快捷方式的过程也不是必须的。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;  在win10上面的vmware中安装ubuntu20.04的过程全纪录&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;正文：&lt;/h2&gt;
&lt;h3 id=&quot;第一步&quot;&gt;第一步&lt;/h3&gt;
&lt;p&gt;安装vmwa</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.zhaomengfei.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.zhaomengfei.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何安装Xic和Wrspice软件</title>
    <link href="https://www.zhaomengfei.xyz/2022/05/07/Blog/Software/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Xic%E5%92%8CWrspice%E8%BD%AF%E4%BB%B6/"/>
    <id>https://www.zhaomengfei.xyz/2022/05/07/Blog/Software/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Xic%E5%92%8CWrspice%E8%BD%AF%E4%BB%B6/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一下在win10上安装Xic Wrspice的过程。</p><hr><p>先说结论：我最终是在win10上的vmware中的ubuntu上安装了Xic和Wrspice软件。</p><p>刚开始看官网和github上有win10上的安装教程，然后操作了一通，没有成功，中间经历了很多坎坷，得出结论，还是上虚拟机中开发吧。。。下面介绍一下我自己的坎坷历程。</p><h3 id="方案一：在win10上直接安装Xic和Wrspice软件">方案一：在win10上直接安装Xic和Wrspice软件</h3><p>在<a href="http://wrcad.com/xictools/downld.php?distrib=MINGW">官网</a>上下载这几个包，然后依次点击安装，装好后就是下面一堆文件，bin文件夹中有所有的启动文件。点击运行软件，你会看到一个终端一闪而过，然后就没有任何动静了。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/202205071559278.png" alt="image-20220507135239293" style="zoom:67%;" /><p>方案一失败。</p><h3 id="方案二：在win10的MSYS2中搞Xic和Wrspice的exe文件">方案二：在win10的MSYS2中搞Xic和Wrspice的exe文件</h3><p>参考这个<a href="http://wrcad.com/win_install.html">链接</a>，上小系统MSYS2，在启动配置并启动Xic和wrspice软件。装好MSYS2后，安装一堆环境包，然后将方案一中的那些 <code>sw/xictools/</code>目录挂载到MSYS2系统中的 <code>/usr/local/xictools/</code>目录下。当进行到最后一步时，在终端中运行 <code>winpty program</code>时，给出了 <code>Failed to load the program DLL</code>的报错。参考github中的<a href="https://github.com/wrcad/xictools/issues/12">该issue</a>，在2022.05.07这一天时，该issue还是open的，官方人员并没有给出有效的解决方案。</p><p>最终，方案二也失败。</p><h3 id="方案三：在win10的MSYS2中编译xic和wrspice的源码">方案三：在win10的MSYS2中编译xic和wrspice的源码</h3><p>参考<a href="https://github.com/wrcad/xictools">github中的说明</a>，决定把该github的xic, wrspice源码文件下载下来，在MSYS2中编译这些源码，最终生成.exe文件，我再去启动这些.exe文件，会不会就可以work了呢？试试再说。</p><p>它官网给出的说明是使用MSYS2，而github中给出的说明是用Cygwin，这两个东西并不一样，但是我觉得对于编译该xic软件应该没啥区别吧，就还是继续使用了方案二中的MSYS2了。先是下载一堆准备环境，其中还参考了github文档中Linux的说明部分，把该装的都装上了。</p><p>最终到了 <code>make config</code>的环节，运行以后，给出了类似于下面这样的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make[2]: *** No rule to make target &#x27;depend&#x27;.  Stop.</span><br></pre></td></tr></table></figure><p>它的源文件我并没有修改什么，但是看这报错好像是它源码的makefile没有处理好，光解决这个问题，搞了好久，反正就是一个又一个的报错吧。</p><p>最终放弃了，方案三失败。</p><h3 id="方案四：在win10的虚拟机中的ubuntu中安装xic和wrspice的-deb文件">方案四：在win10的虚拟机中的ubuntu中安装xic和wrspice的.deb文件</h3><p>既然品出来了，它原本的源码就是在linux下开发的，那我直接上linux系统应该好一些吧。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/202205071559280.png" alt="image-20220507150335022" style="zoom:67%;" /><p>从上图中可知好几种linux系统都是可以的，但是由于见到刚上面那个<a href="https://github.com/wrcad/xictools/issues/12">issue</a>中有人提到用ubuntu装好了软件，所以我也选择了ubuntu，并且选择了和它一模一样的版本。下面开搞！</p><p>参考这个<a href="http://wrcad.com/unix_install.html">教程</a>，下载<a href="http://wrcad.com/xictools/downld.php?distrib=LinuxUbuntu20">这一堆.deb文件</a>。大家可以参考我的<a href="https://blog.csdn.net/weixin_43128203/article/details/124632496?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22124632496%22%2C%22source%22%3A%22weixin_43128203%22%7D&amp;ctrtid=C1MBm">另一篇博客</a>，来装vmware和ubuntu。装好ubuntu后，将win10下的xic的.deb的安装包所在文件夹挂载到虚拟机的ubuntu中，在终端中安装即可。当跟着官网的说明搞完后，就可以正常启动xic, wrspice软件了。</p><p>成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里记录一下在win10上安装Xic Wrspice的过程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先说结论：我最终是在win10上的vmware中的ubuntu上安装了Xic和Wrspice软件。&lt;/p&gt;
&lt;p&gt;刚开始看官网和github上有win10上的安装教程，然后操作了一通，没有</summary>
      
    
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/categories/softwares/"/>
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/tags/softwares/"/>
    
  </entry>
  
  <entry>
    <title>win10如何安装JoSIM软件</title>
    <link href="https://www.zhaomengfei.xyz/2022/04/12/Blog/Software/win10%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85JoSIM%E8%BD%AF%E4%BB%B6/"/>
    <id>https://www.zhaomengfei.xyz/2022/04/12/Blog/Software/win10%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85JoSIM%E8%BD%AF%E4%BB%B6/</id>
    <published>2022-04-11T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言">一、前言</h2><p>这里记录一下在win10上安装JoSIM - Superconducting Circuit Simulator的过程。</p><p><strong>开发环境：</strong></p><ul><li>win10</li><li>vscode （非必须）</li><li>python 3+</li><li>python 下的 cmake  3.14.4</li><li>Git</li><li>C++ compiler with C++17 support</li></ul><h2 id="二、开始">二、开始</h2><p><a href="https://joeydelp.github.io/JoSIM/#microsoft-windows">JoSIM官方文档</a></p><p>将下面两个包下载下来，上面这个是傻瓜版，下载完解压直接用，不用编译出josim-cli.exe和josim.lib了，因为里面已经有了。而下面这个压缩包则是包含源码的工程，例如文档、例子工程等，同样把它解压。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220412183109984.png" alt="image-20220412183109984" style="zoom:80%;" /><p>先通过python 3.+在该工程下建立一个虚拟环境venv，并激活它。下面就在该虚拟环境中安装一些package。</p><p>运行<code>pip install cmake==3.14.4</code></p><p>下面安装MSVC（<a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&amp;rel=16">下载链接</a>），然后只需要安装带有cmake字样的功能即可，装好后重启电脑。</p><p>运行 <code>cmake --help</code>，来看是否是如下图所示的样子，新安装的MSVC上有个星号，有的话就往下继续。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220412183851935.png" alt="image-20220412183851935" style="zoom:67%;" /><p>按照下面的步骤进行</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220412184022288.png" alt="image-20220412184022288" style="zoom:67%;" /><p>当执行完cmake …后，会提示一个Git tag标签的错误，这时候要去这个作者github上查看最新的工程的git的hash值，然后复制粘贴到下面的位置。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220412184209683.png" alt="image-20220412184209683" style="zoom:67%;" /><p>再次cmake …  就没问题了。</p><p>然后把最后一个命令执行了，就会在Release文件夹下产生下面两个东西（这两个东西是和直接下载的另个包中的东西是一致的），然后看官方教程即可。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220412184340677.png" alt="image-20220412184340677" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;这里记录一下在win10上安装JoSIM - Superconducting Circuit Simulator的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;win10&lt;/li</summary>
      
    
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/categories/softwares/"/>
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/tags/softwares/"/>
    
  </entry>
  
  <entry>
    <title>PSCAN2在win10上的安装教程</title>
    <link href="https://www.zhaomengfei.xyz/2022/04/09/Blog/Software/PSCAN2%E5%9C%A8win10%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://www.zhaomengfei.xyz/2022/04/09/Blog/Software/PSCAN2%E5%9C%A8win10%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-04-08T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言">一、前言</h2><p>目的：在win10上安装PSCAN2 Superconductor Circuit Simulator软件。</p><p><strong>开发环境：</strong></p><ul><li>win10</li><li>vscode + python插件 + vhdl插件</li></ul><h2 id="二、开始">二、开始</h2><p>查看官网要求：<a href="http://www.pscan2sim.org/install.html">官网链接</a></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409173851493.png" alt="image-20220409173851493" style="zoom:80%;" /><p>可以看到是安装32 bit的anaconda，所以打开<a href="https://www.anaconda.com/products/distribution">Anaconda网站</a>，往下翻，找到32 bit的windows安装包。可以看到写下这篇博客时，Anaconda已经更新到了Python 3.9，而PSCAN2要求的python环境是3.8的，这个版本差异我是通过后续在Anaconda软件内新建3.8版本的python环境来解决的，所以这里就直接下载这个Python3.9 32bit 的安装包即可。下载好了后，安装，参考这个<a href="https://www.youtube.com/watch?v=kQMPPLRpuI0&amp;ab_channel=Koolac">Anaconda安装教程</a>。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409174028048.png" alt="image-20220409174028048" style="zoom:60%;" /><p>anaconda安装好了后，要是没有将它加入到环境变量，需要加入到环境变量，否则无法在terminal中执行conda命令，参考<a href="https://www.py.cn/tools/anaconda/19876.html#:~:text=%E6%B7%BB%E5%8A%A0anaconda%E5%88%B0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%E9%A6%96%E5%85%88%E8%BF%9B%E5%85%A5anaconda,%E6%B7%BB%E5%8A%A0Scripts%E8%B7%AF%E5%BE%84%E5%8D%B3%E5%8F%AF%E3%80%82&amp;text=%E5%A4%8D%E5%88%B6%E5%BD%93%E5%89%8D%E8%B7%AF%E5%BE%84%EF%BC%9B-,%E6%8E%A5%E7%9D%80%E6%89%93%E5%BC%80%E7%B3%BB%E7%BB%9F%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE%EF%BC%8C%E8%BF%9B%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE%EF%BC%9B,%E6%B7%BB%E5%8A%A0Scripts%E8%B7%AF%E5%BE%84%E5%8D%B3%E5%8F%AF%E3%80%82">这个</a>。</p><p>接下来新建一个python 3.8的环境（按照pscan2 的官网要求），参考<a href="https://blog.csdn.net/H_O_W_E/article/details/77370456">这个</a>，在这篇教程中的py36可以自定义的，当然我们这里需要新建成3.8，而不是3.6的。</p><p>接下来将<a href="http://www.pscan2sim.org/downloads.html">pscan2网站</a>的所有东西下载下来，即下面这些东西，留着用来学习吧。假设我们下载到了一个名叫 <code>pscan2</code>文件夹，并将这所有的压缩包类的都解压到该目录下。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409175516063.png" alt="image-20220409175516063" style="zoom:67%;" /><p>在 <code>pscan2</code>文件夹中，开一个终端，在终端中切换到我们的python3.8环境，然后执行 <code>conda install pscan2-xxx.bz2</code>命令，目的是将pscan2软件部署到该Python环境中，接下来就可以启动pscan2软件了。</p><p>在上面的终端中，cd到testnot文件夹（这里面是一个demo工程，详情见pscan的两个pdf手册），然后键入下面图片中的命令 <code>python -m pscan2.gui testnot</code>，幸运的话，你就能正常启动软件了，并看到GUI软件出现。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409180000361.png" alt="image-20220409180000361" style="zoom:67%;" /><h3 id="遇到了一个bug">遇到了一个bug:</h3><p>我在执行上述命令后，遇到了下面这样的错误：（参考的是<a href="https://stackoverflow.com/questions/28165639/unicodedecodeerror-gbk-codec-cant-decode-byte-0x80-in-position-0-illegal-mult">这个</a>）</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409180406876.png" alt="image-20220409180406876" style="zoom:67%;" /><p>解决办法，打开这个LodaCircuit.py文件，在报错的这一行（如下图所示）进行修改，加入这个 <code>, encoding='UTF-8' </code>，然后保存。再执行一次该命令 <code>python -m pscan2.gui testnot</code>，这次应该就可以正常启动pscan的GUI了。GUI如下所示。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409180518536.png" alt="image-20220409180518536" style="zoom:67%;" /><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220409180743357.png" alt="image-20220409180743357" style="zoom:67%;" /><p><strong>最后：</strong></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/点赞.gif" alt="点赞" style="zoom: 50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;目的：在win10上安装PSCAN2 Superconductor Circuit Simulator软件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;win10&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/categories/softwares/"/>
    
    
    <category term="softwares" scheme="https://www.zhaomengfei.xyz/tags/softwares/"/>
    
  </entry>
  
  <entry>
    <title>Python_使用GUI和多线程时报错</title>
    <link href="https://www.zhaomengfei.xyz/2021/11/29/Blog/Python/Python_%E4%BD%BF%E7%94%A8GUI%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <id>https://www.zhaomengfei.xyz/2021/11/29/Blog/Python/Python_%E4%BD%BF%E7%94%A8GUI%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%97%B6%E6%8A%A5%E9%94%99/</id>
    <published>2021-11-28T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发环境： win10,  Pycharm2021</p><p>这里记录一下解决该问题的历程。该工程中使用到了PyQt5的GUI，多线程技术等。使用pycharm，在程序运行时，程序偶尔会莫名奇妙的退出，并<strong>只是</strong>报下面的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process finished <span class="keyword">with</span> exit code -<span class="number">1073741819</span> (<span class="number">0xC0000005</span>)</span><br></pre></td></tr></table></figure><p>纳尼，只是给出了这一个报错，却没有任何traceback？？！（<strong>想直接看结论的请下滑到底</strong>）并且这个报错只是偶尔才会给出。上网搜索上面这个报错，查到了<a href="https://stackoverflow.com/questions/33582766/process-finished-with-exit-code-1073741515-0xc0000135">这个</a>，按照其给出的方法试了试：</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129214434686.png" alt="image-20211129214434686"></p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129214525252.png" alt="image-20211129214525252"></p><p>于是查看win10的<strong>事件管理器</strong>，发现了下面的报错信息，而这些竟然在pycharm中完全不显示。由下面看出来应该是pyqt5引起的报错，于是重新安装了pyqt5，报错并没有解决。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129214749891.png" alt="image-20211129214749891"></p><p>又上网搜索该 <strong>事件管理器</strong>中的报错，没有解决问题。</p><hr><p>于是又上网搜索 <strong>pycharm come across error without traceback</strong>，终于努力对了方向。找到了<a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/207319305-No-stack-trace-printed-after-exception">这个</a>，按照下面这种方法试了试，终于在debug时给出了具体的 <strong>traceback</strong>。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129215454501.png" alt="image-20211129215454501"></p><p>Debug的Console中给出的具体的报错如下，而且在程序靠前的某处还给出了一个警告，但是并没有影响程序的往下执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">警告如下：</span><br><span class="line">QObject::setParent: Cannot <span class="built_in">set</span> parent, new parent <span class="keyword">is</span> <span class="keyword">in</span> a different thread</span><br><span class="line"></span><br><span class="line">--snippets--</span><br><span class="line"></span><br><span class="line">报错如下：</span><br><span class="line">QObject: Cannot create children <span class="keyword">for</span> a parent that <span class="keyword">is</span> <span class="keyword">in</span> a different thread.</span><br><span class="line">(Parent <span class="keyword">is</span> QTextDocument(<span class="number">0x18992e5ad60</span>), parent<span class="string">&#x27;s thread is QThread(0x18990b3af30), current thread is QThread(0x18993804600)</span></span><br></pre></td></tr></table></figure><p>于是上网搜索这两个报错，发现了<a href="https://forum.qt.io/topic/68530/about-the-right-way-to-use-qthread-error-cannot-create-children-for-a-parent-that-is-in-a-different-thread/4">link1</a>, <a href="https://stackoverflow.com/questions/3268073/qobject-cannot-create-children-for-a-parent-that-is-in-a-different-thread">link2</a>, <a href="https://forum.qt.io/topic/78994/error-qobject-setparent-cannot-set-parent-new-parent-is-in-a-different-thread">link3</a>：</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129220318194.png" alt="image-20211129220318194"></p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211129220554350.png" alt="image-20211129220554350"></p><p>看完后有了灵感，总之是pyqt5的GUI和多线程导致的报错。于是上网搜索 <strong>pyqt5 qthread</strong>关键词，找到了一个令人欣喜若狂的文章：<strong><a href="https://realpython.com/python-pyqt-qthread/#conclusion">戳我</a></strong>。该文章中还讲了python的线程和QThread的比较。看完后完全明白了，上面的这些警告和报错是如何产生的。我的程序是先运行windows的部分，此时是在mainThread里，然后在mainThread里又开了一个python的thread去处理mainThread里的一些objects和widgets，而每当要访问这些widgets的地方都会抛出上述的<strong>警告和错误</strong>。</p><p>然后按照该文章，比葫芦画瓢就好了。搞定~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开发环境： win10,  Pycharm2021&lt;/p&gt;
&lt;p&gt;这里记录一下解决该问题的历程。该工程中使用到了PyQt5的GUI，多线程技术等。使用pycharm，在程序运行时，程序偶尔会莫名奇妙的退出，并&lt;strong&gt;只是&lt;/strong&gt;报下面的错误：&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python_多继承时_父类之间竟然可以相互调用method</title>
    <link href="https://www.zhaomengfei.xyz/2021/11/09/Blog/Python/Python_%E5%A4%9A%E7%BB%A7%E6%89%BF%E6%97%B6_%E7%88%B6%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8method/"/>
    <id>https://www.zhaomengfei.xyz/2021/11/09/Blog/Python/Python_%E5%A4%9A%E7%BB%A7%E6%89%BF%E6%97%B6_%E7%88%B6%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%AB%9F%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8method/</id>
    <published>2021-11-08T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_b</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In class B, func_b&quot;</span>)</span><br><span class="line"><span class="comment"># print(&#x27;B: &#x27;, B.__mro__)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B: &#x27;</span>, self)</span><br><span class="line">self.func_d()  <span class="comment"># 调用同为父类的D中的func_d函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_c</span>(<span class="params">self</span>):</span></span><br><span class="line">self.func_b()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C: &#x27;</span>, self)</span><br><span class="line"><span class="comment"># print(&#x27;C: &#x27;, C.__mro__)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In class C, func_c&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_d</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;D: &#x27;</span>, self)</span><br><span class="line"><span class="comment"># print(&#x27;D: &#x27;, D.__mro__)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In class D, func_d&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">B, C, D</span>):</span>  <span class="comment"># A同时继承B,C,D</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="built_in">super</span>(A, self).__init__()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A: &#x27;</span>, self)</span><br><span class="line"><span class="comment"># print(&#x27;A: &#x27;, A.__mro__)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_d</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In class A, func_d&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">A_inst = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A_inst: &#x27;</span>, A_inst)</span><br><span class="line">A_inst.func_b()</span><br><span class="line">A_inst.func_c()</span><br><span class="line">A_inst.func_d()</span><br></pre></td></tr></table></figure><p>上面B,C,D都是A的父类，互为平行关系，而C类中的func_c竟然可以调用B类中的func_b？？？程序运行结果如下，可以看到<strong>类实例A_inst</strong>和<strong>A, B,C,类中的self</strong>是一个内存地址，这也就解释了为何C类中的func_c竟然可以调用B类中的func_b。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A:  &lt;__main__.A object at 0x000002D60CE2E070&gt;</span><br><span class="line">A_inst:  &lt;__main__.A object at 0x000002D60CE2E070&gt;</span><br><span class="line">In class B, func_b</span><br><span class="line">B:  &lt;__main__.A object at 0x000002D60CE2E070&gt;</span><br><span class="line">In class A, func_d</span><br><span class="line">In class B, func_b</span><br><span class="line">B:  &lt;__main__.A object at 0x000002D60CE2E070&gt;</span><br><span class="line">In class A, func_d</span><br><span class="line">C:  &lt;__main__.A object at 0x000002D60CE2E070&gt;</span><br><span class="line">In class C, func_c</span><br><span class="line">In class A, func_d</span><br></pre></td></tr></table></figure><p>**知识点：**有self时，该方法是绑定到对象的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func01</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绑定到对象的方法&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func02</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绑定到类的方法&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func03</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;非绑定方法&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参考：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AD软件_PCB板的四个角放置通孔和圆弧keepout线的快捷方法</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/15/Blog/PCB/AD_PCB%E6%9D%BF%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E6%94%BE%E7%BD%AE%E9%80%9A%E5%AD%94%E5%92%8C%E5%9C%86%E5%BC%A7keepout%E7%BA%BF%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E6%B3%95/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/15/Blog/PCB/AD_PCB%E6%9D%BF%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E6%94%BE%E7%BD%AE%E9%80%9A%E5%AD%94%E5%92%8C%E5%9C%86%E5%BC%A7keepout%E7%BA%BF%E7%9A%84%E5%BF%AB%E6%8D%B7%E6%96%B9%E6%B3%95/</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p><strong>环境介绍：</strong> AD20</p><h2 id="正文：">正文：</h2><p>在开始画PCB时，先用keepout线画一个矩形，把origin点设置到角落里。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015224400882.png" alt="image-20211015224400882" style="zoom:50%;" /><p>然后放置一个通孔（用于安装螺丝，来固定板卡），并设置通孔的坐标为一个（-3.3mm, 3.3mm），这个距离自己掌握，但必须x,y绝对值相等。</p><p>选中通孔，<code>ctrl+c</code>，出来绿色十字架时，点一下origin（以Origin）为复制参考点。点击另外的三个角，<code>ctrl+v</code>，出现绿色十字架时，按下空格来旋转，然后点击板卡的顶点。搞定！</p><p>之后在四个角画keepout圆弧，选择圆弧工具：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225053567.png" alt="image-20211015225053567" style="zoom:68%;" /><p>出现绿色十字架，点击一下通孔的圆心：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225331348.png" alt="image-20211015225331348" style="zoom:50%;" /><p>然后点击<strong>大圆</strong>与<strong>矩形边</strong>相切的位置，如下图（我们只需要右下角的<strong>四分之一圆弧</strong>）：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225543912.png" alt="image-20211015225543912" style="zoom:50%;" /><p>之后删除多余的矩形的<strong>角</strong>，就得到这样的了。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211015225807361.png" alt="image-20211015225807361" style="zoom:50%;" /><p>然后选中这个<strong>四分之一圆弧</strong>，以通孔圆心为参考点，复制，粘贴处其余3个角。</p><p>搞定！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;环境介绍：&lt;/strong&gt; AD20&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;正文：&lt;/h2&gt;
&lt;p&gt;在开始画PCB时，先用keepout线画一个矩形，把origin点设置到角落里。&lt;/p&gt;
&lt;img src=&quot;htt</summary>
      
    
    
    
    <category term="PCB" scheme="https://www.zhaomengfei.xyz/categories/PCB/"/>
    
    
    <category term="PCB" scheme="https://www.zhaomengfei.xyz/tags/PCB/"/>
    
    <category term="AD软件" scheme="https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>AD软件方便的铺铜，并放置via阵列</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/12/Blog/PCB/AD%E6%96%B9%E4%BE%BF%E7%9A%84%E9%93%BA%E9%93%9C%E6%96%B9%E6%B3%95_%E5%B9%B6%E6%94%BE%E7%BD%AEvia%E9%98%B5%E5%88%97/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/12/Blog/PCB/AD%E6%96%B9%E4%BE%BF%E7%9A%84%E9%93%BA%E9%93%9C%E6%96%B9%E6%B3%95_%E5%B9%B6%E6%94%BE%E7%BD%AEvia%E9%98%B5%E5%88%97/</id>
    <published>2021-10-11T16:00:00.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言：">前言：</h2><p><strong>环境介绍：</strong>  AD20</p><p><strong>目的：</strong>  将PCB两面都铺上GND的铜，并放置via阵列。</p><h2 id="正文：">正文：</h2><h3 id="方式一：">方式一：</h3><p>当把板子都布局，布好线后，需要铺铜时，<code>P-&gt;G</code>，然后选择铺铜的区域，围绕板子四周画一个矩形，画好后，鼠标右键2下，铺铜。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012164220558.png" alt="image-20211012164220558" style="zoom:67%;" /><p>铺好后手动去除板子四个角外部的铜，如下图所示，选择Polygon Pour Cutout，然后把不想要的铜圈起来即可。选中铜皮，将其设置为连接到GND net上。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012164527955.png" alt="image-20211012164527955" style="zoom:67%;" /><p>上面只是铺好了top layer的铜皮，下面来铺bottom layer的。选中top layer的铜皮，ctrl+c，然后鼠标左键点击一下我们设置好的origin point，切换到bottom layer，选择special paste，然后对话框设置一下，之后再选择一次origin point即可。之后可以再按照上述方式去除一下keep out外面的死铜。当然也可以在铺铜的设置选项里勾选“去除死铜”，但是这样会把板子里面的死铜也给去除掉（一般需要去除死铜），读者根据需要来选择吧。</p><img src="http://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165114319.png" alt="image-20211012165114319" style="zoom:80%;" /><h3 id="方式二：">方式二：</h3><p>当需要画多层板时，有时需要在每一层都铺上铜（前提是内电层是middle layer，不是plane，因为middle layer可以进行铺铜）。按照下面的方法操作：</p><ul><li>先在top layer铺上铜，按快捷键<code>T-G-M</code>进入Polygon Pour Manager，在这里面批量添加铺铜，并设置各个层的Net和名称。</li><li>注意：放设置完每一层的Properties信息，想要Apply一下（不用点击OK)，然后再在此窗口中点击Repour操作，否则会出现自己修改完了信息，但是铺铜时发现未识别到刚修改的那一层。</li></ul><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211017144145209.png" alt="image-20211017144145209" style="zoom:60%;" /><h3 id="放置via阵列：">放置via阵列：</h3><p>下面开始放置一些小的via阵列，首先将“铜皮”隐藏，放置干扰我们视野。方法：ctrl+D，在view configuration窗口中隐藏Polygons。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165745814.png" alt="image-20211012165745814" style="zoom:80%;" /><p>开始放置via阵列：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012165946987.png" alt="image-20211012165946987" style="zoom:80%;" /><p>先设置一下Net为GND，然后去勾选左上角的Constrain Area来选择放置的区域，根据需要设置间距，大小之类的参数。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012170045704.png" alt="image-20211012170045704" style="zoom:80%;" /><p>放好via阵列的样子：</p><img src="http://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211012170315201.png" alt="image-20211012170315201" style="zoom:67%;" /><p>之后将铜皮取消隐藏即可，并布置丝印层。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;前言：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;环境介绍：&lt;/strong&gt;  AD20&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;  将PCB两面都铺上GND的铜，并放置via阵列。&lt;/p&gt;
&lt;h2 id=&quot;正文：&quot;&gt;正文：&lt;/h2&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="PCB" scheme="https://www.zhaomengfei.xyz/categories/PCB/"/>
    
    
    <category term="PCB" scheme="https://www.zhaomengfei.xyz/tags/PCB/"/>
    
    <category term="AD软件" scheme="https://www.zhaomengfei.xyz/tags/AD%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ZYNQ开发学习笔记（一）：BOOT.bin，fsbl文件，将程序固化到板上的QSPI_Flash中</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/10/Blog/ZYNQ/ZYNQ%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABOOT.bin%EF%BC%8Cfsbl%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E7%A8%8B%E5%BA%8F%E5%9B%BA%E5%8C%96%E5%88%B0%E6%9D%BF%E4%B8%8A%E7%9A%84QSPI_Flash%E4%B8%AD/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/10/Blog/ZYNQ/ZYNQ%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ABOOT.bin%EF%BC%8Cfsbl%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E7%A8%8B%E5%BA%8F%E5%9B%BA%E5%8C%96%E5%88%B0%E6%9D%BF%E4%B8%8A%E7%9A%84QSPI_Flash%E4%B8%AD/</id>
    <published>2021-10-10T05:26:01.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、环境介绍：">1、环境介绍：</h2><ul><li>ZYNQ-7000 MZ7XA板卡</li><li>vivado 2020.1</li><li>vitis 2020.1</li></ul><h2 id="2、正文：">2、正文：</h2><p>首先介绍一下<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/101053?fr=aladdin">镜像</a>这个概念，下面是百度百科中的解释：</p><blockquote><p>所谓镜像文件其实和rar ZIP压缩包类似，它将特定的一系列文件按照一定的格式制作成单一的文件，以方便用户下载和使用，例如一个操作系统、游戏等。它最重要的特点是可以被特定的软件识别并可直接刻录到<a href="https://baike.baidu.com/item/%E5%85%89%E7%9B%98/170215">光盘</a>上。其实通常意义上的镜像文件可以再扩展一下，在镜像文件中可以包含更多的信息。比如说系统文件、<a href="https://baike.baidu.com/item/%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6/659617">引导文件</a>、<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E8%A1%A8/215102">分区表</a>信息等，这样镜像文件就可以包含一个分区甚至是一块硬盘的所有信息。</p></blockquote><p>额，理解了镜像的概念，接下来以在vivado vitis工程中的实际操作中学习BOOT.bin  fsbl等内容。</p><h3 id="vivado工程方面：">vivado工程方面：</h3><p>配置一下PS，生成一个HDL Wrapper.v，然后在Wrapper.v文件中加入一段4bit流水灯的代码，代码如下：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002162341338.png" alt="image-20211002162341338" style="zoom:67%;" /><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002162649052.png" alt="image-20211002162649052" style="zoom:70%;" /><p>然后生成.bit文件，导出xsa文件，接下在切换到vitis开发。</p><h3 id="vitis工程方面：">vitis工程方面：</h3><p>新建一个硬件工程，命名为<code>run_led_hw_platform</code></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002163328456.png" alt="image-20211002163328456" style="zoom:67%;" /><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002163622228.png" alt="image-20211002163622228" style="zoom:80%;" /><p>指定刚vivado生成的xsa文件，上图中记得勾选Generate boot components，这个会在生成的硬件工程中产生一个zynq_fsbl文件夹，打开会发现有一堆fsbl相关的源文件，编译一下整个硬件工程，就会在下面图二的1处产生一个fsbl.elf文件。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164114451.png" alt="image-20211002164114451"></p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164030549.png" alt="image-20211002164030549"></p><p>接下来新建一个helloWorld的应用工程，命名为<code>helloWorld</code>，并编译一下。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164344390.png" alt="image-20211002164344390" style="zoom:80%;" /><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002164607517.png" alt="image-20211002164607517"></p><p>接下来讲一下当我们成功固化程序到flash中后，ZYNQ板子启动的过程。</p><ul><li><p>ZYNQ内部的BootROM存储有一段在CPU复位后固定执行的代码。称为stage-0启动代码。（这个ROM中的代码，掉电不丢失）</p></li><li><p>这段代码用来配置一个ARM CPU和一些必要外设，从而能从一个启动设备中获取FSBL（first stage boot loader）执行。BootROM是一个ROM，不可写，PL的配置不是通过BootROM实现的。BootROM不能使用DDR和SCU，因为它们还没有初始化。</p></li><li><p>BOOT.bin是一个镜像文件，我们这里是将它存储在外部的QSPI-Flash中，BOOT.bin包含有fsbl.elf，PL部分配置文件（.bit)，应用工程的可执行二进制文件（helloWorld.elf文件）</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/20200626232927148.png" alt=" "></p></li><li><p>当BootROM把flash中BOOT.bin中的fsbl装载到OCM后，接下来就开始执行fsbl了。</p></li><li><p>fsbl负责下面这些：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002172924391.png" alt="image-20211002172924391" style="zoom:80%;" /><p>对于基于zynq的嵌入式Linux系统，BootROM引导启动FSBL，FSBL引导启动U-Boot，U-boot引导启动Linux内核。</p></li></ul><p>理解了上面这些，接下来继续创建Boot Image。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002171139341.png" alt="image-20211002171139341" style="zoom:80%;" /><p>上图中出现了好多文件，它们的关系详情请参考ug821的boot章节，这个BOOT.bin就是需要制作出来的镜像文件，它里面包含有下面fsbl.elf，run_lef.bit，helloWorld.elf文件。至于上面的helloWorld.bif文件，它是一个Boot Image Format 文件，用于制作BOOT.bin用的。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002173806240.png" alt="image-20211002173806240"></p><p>制作好BOOT.bin后，接下来把它烧录到QSPI-Flash中：</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174044195.png" alt="image-20211002174044195"></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174241139.png" alt="image-20211002174241139" style="zoom:90%;" /><p>在consol窗口中出现一系列消息后，就成功了。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174408697.png" alt="image-20211002174408697"></p><p>此时打开一个串口窗口，对板子重新上电，可看到流水灯在闪烁，串口打印成功。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211002174626648.png" alt="image-20211002174626648"></p><h2 id="3、参考文献：">3、参考文献：</h2><ul><li><a href="https://blog.csdn.net/jinry001/article/details/99693549">米联客教程</a></li><li><a href="https://blog.csdn.net/asd1147170607/article/details/106976572">ZYNQ_FSBL学习</a></li><li><a href="https://blog.csdn.net/qq_43445577/article/details/113846028">zynq中的BootROM</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、环境介绍：&quot;&gt;1、环境介绍：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ZYNQ-7000 MZ7XA板卡&lt;/li&gt;
&lt;li&gt;vivado 2020.1&lt;/li&gt;
&lt;li&gt;vitis 2020.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2、正文：&quot;&gt;2、正文：&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    <category term="ZYNQ" scheme="https://www.zhaomengfei.xyz/categories/ZYNQ/"/>
    
    
    <category term="ZYNQ" scheme="https://www.zhaomengfei.xyz/tags/ZYNQ/"/>
    
  </entry>
  
  <entry>
    <title>Arduino舒适的开发环境搭建：vscode+arduino插件</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/10/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_arduino%E6%8F%92%E4%BB%B6/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/10/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_arduino%E6%8F%92%E4%BB%B6/</id>
    <published>2021-10-10T04:26:01.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>板卡：Arduino uno</li><li>OS: win10</li><li>开发环境：vscode + arduino插件</li><li>工程作用：可以实现arduino的LED闪烁。</li></ul><hr><p>安装Arduino插件：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007192010599.png" alt="image-20211007192010599" style="zoom:70%;" /><p>目录结构：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007192231896.png" alt="image-20211007192231896" style="zoom:67%;" /><h3 id="1、在vscode的用户配置文件settings-json中加入下面这些内容，用来对arduino插件做全局的默认配置：">1、在vscode的用户配置文件settings.json中加入下面这些内容，用来对arduino插件做全局的默认配置：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;arduino.path&quot;</span>: <span class="string">&quot;G:\\Arduino&quot;</span>, <span class="comment">// arduino IDE安装的位置</span></span><br><span class="line"><span class="string">&quot;arduino.commandPath&quot;</span>: <span class="string">&quot;arduino_debug.exe&quot;</span>, <span class="comment">//这是一个上述位置中的exe文件</span></span><br><span class="line"><span class="string">&quot;C_Cpp.default.browse.path&quot;</span>: [ </span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\tools\\avr\\avr\\include\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\tools\\avr\\lib\\gcc\\avr\\7.3.0\\include\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\arduino\\avr\\cores\\arduino\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\arduino\\avr\\variants\\standard\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\ArduinoPrj\\libraries\\**&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;C_Cpp.default.includePath&quot;</span>: [ <span class="comment">//头文件引用路径</span></span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\tools\\avr\\avr\\include\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\tools\\avr\\lib\\gcc\\avr\\7.3.0\\include\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\arduino\\avr\\cores\\arduino\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\Arduino\\hardware\\arduino\\avr\\variants\\standard\\**&quot;</span>,</span><br><span class="line">  <span class="string">&quot;G:\\ArduinoPrj\\libraries\\**&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;arduino.logLevel&quot;</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line"><span class="string">&quot;arduino.allowPDEFiletype&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;arduino.enableUSBDetection&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;arduino.disableTestingOpen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;arduino.skipHeaderProvider&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;arduino.disableIntelliSenseAutoGen&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;arduino.additionalUrls&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://raw.githubusercontent.com/VSChina/azureiotdevkit_tools/master/package_azureboard_index.json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://arduino.esp8266.com/stable/package_esp8266com_index.json&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;arduino.defaultBaudRate&quot;</span>: <span class="number">115200</span>,</span><br></pre></td></tr></table></figure><h3 id="2、在-vscode文件夹下新建一个c-cpp-settings-json，并添加下面内容：">2、在.vscode文件夹下新建一个c_cpp_settings.json，并添加下面内容：</h3><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008094940783.png" alt="image-20211008094940783" style="zoom:80%;" /><p>上述中的includePath是需要认真设置的，这个不设置也行，在编写源文件时，会在#include的头文件下面出现红色波浪线，提示找不到文件之类的，例如下方这个。此时点击Quick Fix，把路径添加上就可以了，新添加的路径会自动出现在上方c_cpp_settings.json中的includePath中。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008095347411.png" alt="image-20211008095347411" style="zoom:80%;" /><h3 id="3、在-vscode文件夹下新建一个arduino-json，并添加下面内容：">3、在.vscode文件夹下新建一个arduino.json，并添加下面内容：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;sketch&quot;</span>: <span class="string">&quot;appMain.ino&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;COM10&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;board&quot;</span>: <span class="string">&quot;arduino:avr:uno&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;output&quot;</span>: <span class="string">&quot;./build&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;debugger&quot;</span>: <span class="string">&quot;jlink&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;intelliSenseGen&quot;</span>: <span class="string">&quot;global&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写源文件">4、编写源文件</h3><p>请在<a href="https://github.com/Mengfei-Zhao/utility">github</a>中下载。</p><h3 id="5、编译烧录">5、编译烧录</h3><p>写好源文件后，点击图中的A是编译，B是烧录，C是修改串口号，D是c_cpp_settings.json中的&quot;name&quot;</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211008100422545.png" alt="image-20211008100422545"></p><h3 id="6、搞定">6、搞定</h3><p><strong>工程文件有需要的话，请到<a href="https://github.com/Mengfei-Zhao/utility">Github</a>中下载</strong></p><p><strong>另外，vscode-arduino官方的文档看这个<a href="https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino">链接</a>。</strong></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/点赞.gif" alt="点赞" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;板卡：Arduino uno&lt;/li&gt;
&lt;li&gt;OS: win10&lt;/li&gt;
&lt;li&gt;开发环境：vscode + arduino插件&lt;/li&gt;
&lt;li&gt;工程作用：可以实现arduino的LED闪烁。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;安装Ardui</summary>
      
    
    
    
    <category term="vscode" scheme="https://www.zhaomengfei.xyz/categories/vscode/"/>
    
    <category term="Arduino" scheme="https://www.zhaomengfei.xyz/categories/vscode/Arduino/"/>
    
    
    <category term="Arduino" scheme="https://www.zhaomengfei.xyz/tags/Arduino/"/>
    
    <category term="vscode" scheme="https://www.zhaomengfei.xyz/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>如何将阿里云的域名绑定到Github Page</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/10/Blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E5%A6%82%E4%BD%95%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0Github_Page/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/10/Blog/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E5%A6%82%E4%BD%95%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0Github_Page/</id>
    <published>2021-10-10T04:26:01.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、阿里云注册一个域名">1、阿里云注册一个域名</h3><h3 id="2、设置域名解析">2、设置域名解析</h3><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010150234294.png" alt="image-20211010150234294" style="zoom:67%;" /><h3 id="3、添加记录，将域名指向自己的Github-Page">3、添加记录，将域名指向自己的Github Page</h3><p>首先获得自己的Github Page的IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping username.github.io</span><br></pre></td></tr></table></figure><p>然后添加一条记录，并按照下图所示设置，A处要填上刚获得的Github Page的IP地址。（这些相关知识点参见<a href="https://blog.csdn.net/qq_29232943/article/details/52786603">链接</a>）</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151013790.png" alt="image-20211010151013790" style="zoom:80%;" /><p>然后再新建一条记录，<a href="http://xn--github-ow0ju27cvwlwldnr2gou2awvus5g.io">记录值要填自己的github.io</a></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151316911.png" alt="image-20211010151316911" style="zoom:80%;" /><p>设置好了后，应该是看到下面这样，需要看到两记录的状态是正常的才行：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010151518680.png" alt="image-20211010151518680" style="zoom:80%;" /><h3 id="4、在Github-page中设置">4、在Github page中设置</h3><p>在自己的username.github.io界面，点击Setting，然后直接往下翻，找到GitHub Pages，并进入设置页面。</p><p>然后在下面设置域名，并勾选Enforce HTTPS（这个是有加密的，更好些，这样之后自己的网站链接前面是https开头的，如果这里是灰状勾选不了，是因为设置时有问题导致的。），A处就是自己的网站名字。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211010152204074.png" alt="image-20211010152204074" style="zoom:80%;" /><h3 id="5、在hexoSite工程文件中设置">5、在hexoSite工程文件中设置</h3><p>在source文件夹下新建一个名称为CNAME的文件，无后缀。并键入下面这样的东西（记得修改为自己的）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">www.zhaomengfei.xyz</span></span><br><span class="line"><span class="string">zhaomengfei.xyz</span></span><br></pre></td></tr></table></figure><h3 id="6、然后就是正常的hexo的命令操作">6、然后就是正常的hexo的命令操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="7、最终效果">7、最终效果</h3><p>这样，以后在浏览器中键入<code>username.github.io</code>       <code>zhaomengfei.xyz</code>       <code>www.zhaomengfei.xyz时都会自动跳到</code><a href="https://www.zhaomengfei.xyz">https://www.zhaomengfei.xyz</a> 的。</p><p>搞定~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、阿里云注册一个域名&quot;&gt;1、阿里云注册一个域名&lt;/h3&gt;
&lt;h3 id=&quot;2、设置域名解析&quot;&gt;2、设置域名解析&lt;/h3&gt;
&lt;img src=&quot;https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/</summary>
      
    
    
    
    <category term="个人网站" scheme="https://www.zhaomengfei.xyz/categories/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://www.zhaomengfei.xyz/tags/Hexo/"/>
    
    <category term="Github Page" scheme="https://www.zhaomengfei.xyz/tags/Github-Page/"/>
    
    <category term="个人网站" scheme="https://www.zhaomengfei.xyz/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Arduino舒适的开发环境搭建：vscode+PlatformIO</title>
    <link href="https://www.zhaomengfei.xyz/2021/10/09/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_platformio/"/>
    <id>https://www.zhaomengfei.xyz/2021/10/09/Blog/Arduino/Arduino%E8%88%92%E9%80%82%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA_vscode_platformio/</id>
    <published>2021-10-09T15:26:01.000Z</published>
    <updated>2022-05-07T08:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言">一、前言</h2><p>Arduino自带的IDE用在小的工程时还可以应付，但是面对大型工程时，就比较鸡肋了。本着想愉快的编写Arduinio的代码，让我们开始“折腾”吧~</p><p><strong>开发环境：</strong></p><ul><li>win10</li><li>vscode + PlatformIO插件</li><li>Arduino 官方的IDE  1.8.16</li><li>手头有一个Arduino UNO板卡</li></ul><h2 id="二、开始">二、开始</h2><p>首先下载、安装vscode。然后安装platformio插件，如下图：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007173651871.png" alt="image-20211007173650230" style="zoom:70%;" /><p>这个插件在使用IDE新建工程时，有些bug，就是特别慢，网上说是需要从github上下载一些东西，所以就很慢，而国内在使用github时有时候就是挺慢的。不过还是想用这么香的东西，肿么办呢？且听我慢慢道来。</p><h3 id="使用IDE方式新建helloworld工程：">使用IDE方式新建helloworld工程：</h3><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174311073.png" alt="image-20211007174311073" style="zoom:80%;" /><p>首先点击如图所示的，更新一下pio core，下面是官方的介绍（<a href="!%5Bimage-20211007174534039%5D(C:/Users/meng/AppData/Roaming/Typora/typora-user-images/image-20211007174534039.png)!%5Bimage-20211007174534039%5D(C:/Users/meng/AppData/Roaming/Typora/typora-user-images/image-20211007174534039.png)">官方文档链接</a>），小伙伴记得仔细看官方文档呦。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174451940.png" alt="image-20211007174451940"></p><p>然后点击下面的New Project。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174714097.png" alt="image-20211007174714097"></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007174912757.png" alt="image-20211007174912757" style="zoom:80%;" /><p>这里在选择工程路径时，有时加载会有些慢。然后点击底部的Finish，之后会加载一段时间，这个时间真是很奇怪，快时只需要几秒钟，慢时一个小时也搞不定。慢时我后面会讲如何应对。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007175216973.png" alt="image-20211007175216973"></p><p>之后窗口中会出现两个相同的文件夹，需要右击任意删除一个（点击Remove folder from workspace）。之后save as一个workspace。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007175724408.png" alt="image-20211007175724408"></p><p>处理之后一定要确保左侧的工作空间窗口中像上图这样，即一个workspace下面只有一个helloworld4的工作目录。如果是像下面这样嵌套的路径结构或者其他的结构，后面在编写源文件时，可能会出现头文件引用找不到的问题，即例如右侧B处的Serial下面有个红色波浪线，提示找不到该玩意儿在哪里。。。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007180030141.png" alt="image-20211007180030141" style="zoom:80%;" /><p>而这点是vscode中c/c++插件的一个bug（详情参见此<a href="https://community.platformio.org/t/include-errors-detected/5858">链接</a>），只要想办法绕过此bug即可。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007180741703.png" alt="image-20211007180741703"></p><p>当然若实在是头文件引用错误的话，可以暴力点，关闭所有的错误提示，从此再无红色波浪线（设置看此<a href="https://blog.csdn.net/HermitSun/article/details/103627053#:~:text=%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E4%BA%86%E3%80%82-,%E5%90%AF%E7%94%A8%E6%96%B9%E6%B3%95%E6%98%AFctrl%2Bshift%2Bp%20%E6%90%9C%E7%B4%A2%E5%90%AF%E7%94%A8%E9%94%99%E8%AF%AF%E6%B3%A2%E5%BD%A2,%E6%9B%B2%E7%BA%BF%EF%BC%8C%E6%89%93%E5%BC%80%E5%B0%B1%E8%A1%8C...&amp;text=%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0%E6%B3%A2%E5%BD%A2%E6%9B%B2%E7%BA%BF%EF%BC%9A%20%E8%A7%A3%E5%86%B3,%E6%94%B9%E4%B8%BAtrue%E5%8D%B3%E5%8F%AF%E3%80%82">链接</a>）。</p><p><strong>编写源代码：</strong></p><p>下面是让LED灯闪烁，并发送数据到串口。</p><p>main.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> onboard 13</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  <span class="built_in">pinMode</span>(onboard, OUTPUT);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(onboard, LOW);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(onboard, HIGH);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对了，arduino的代码其实就是C++代码，当然可以分成很多个子.cpp，.h来编写代码，参考<a href="https://www.eefocus.com/liusk2014/blog/14-05/303449_fe78d.html">链接1</a>， <a href="https://blog.csdn.net/codalion/article/details/86014560">链接2</a>。</p><p><strong>编译，烧录：</strong></p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007181612585.png" alt="image-20211007181612585"></p><p>上图中A是编译，B是烧录，C是打开串口工具。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007181950115.png" alt="image-20211007181950115" style="zoom:80%;" /><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007182127853.png" alt="image-20211007182127853" style="zoom:80%;" /><p>下面是串口中的数据：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007182330671.png" alt="image-20211007182330671" style="zoom:80%;" /><p><strong>搞定！</strong></p><h3 id="若通过IDE方式来创建工程，很慢的话，请接着往下看">若通过IDE方式来创建工程，很慢的话，请接着往下看</h3><p>首先看下这个<a href="https://community.platformio.org/t/too-slow-to-create-a-new-project/18259">链接</a>。</p><p>可以通过CLI的方式来创建工程，用vscode打开一个空文件夹，然后在terminal中敲入 <code>pio project init --board uno</code>，然后会在vscode中释放一堆一样的文件夹结构（<em>这个过程会快一些吧</em>），然后打开这个platformio工程，此时看下platformio.ini文件中是否正确，如下所示。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20211007183715444.png" alt="image-20211007183715444" style="zoom:80%;" /><p>现在新建并编写自己的源文件即可。</p><p><strong>最后：</strong></p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/点赞.gif" alt="点赞" style="zoom: 50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;Arduino自带的IDE用在小的工程时还可以应付，但是面对大型工程时，就比较鸡肋了。本着想愉快的编写Arduinio的代码，让我们开始“折腾”吧~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发环境：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="vscode" scheme="https://www.zhaomengfei.xyz/categories/vscode/"/>
    
    <category term="Arduino" scheme="https://www.zhaomengfei.xyz/categories/vscode/Arduino/"/>
    
    
    <category term="Arduino" scheme="https://www.zhaomengfei.xyz/tags/Arduino/"/>
    
    <category term="vscode" scheme="https://www.zhaomengfei.xyz/tags/vscode/"/>
    
    <category term="PlatformIO" scheme="https://www.zhaomengfei.xyz/tags/PlatformIO/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm在远程Debug时，X11显示图像，matplotlib会报Matplotlib is currently using agg的错</title>
    <link href="https://www.zhaomengfei.xyz/2021/06/10/Blog/Python/Pycharm_%E8%BF%9C%E7%A8%8BDebug_X11_matplotlib/"/>
    <id>https://www.zhaomengfei.xyz/2021/06/10/Blog/Python/Pycharm_%E8%BF%9C%E7%A8%8BDebug_X11_matplotlib/</id>
    <published>2021-06-09T16:00:00.000Z</published>
    <updated>2022-06-10T09:16:00.357Z</updated>
    
    <content type="html"><![CDATA[<p>开发环境：</p><ul><li>本地环境win10,  Pycharm2021</li><li>使用远程的centos7 服务器上的python解释器</li></ul><p>Matplotlib会抛出下面的警告，然后用matplotlib画的图也无法显示了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserWarning: Matplotlib is currently using agg, <span class="built_in">which</span> is a non-GUI backend, so cannot show the figure.</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="在服务器端的配置">在服务器端的配置</h2><p>首先要检查服务器上的ssh协议是否正常运行，centos7的话是使用 <code>sudo vim /etc/ssh/sshd_config</code>来编辑ssh的配置文件，加入下面这样的两行。第一行是开启X11Forwarding，第二行是让默认的Display号为11。这个怎么理解呢？以我的使用场景为例，如果该服务器只有自己一个人用ssh的话，当你开启一个MobaXterm，通过ssh连接到服务器后，我本地电脑分配到的Display号默认就是11了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X11Forwarding yes</span><br><span class="line">X11DisplayOffset 11</span><br></pre></td></tr></table></figure><h2 id="在本地机的配置">在本地机的配置</h2><p>下面就是只在自己本地机上操作了，用MobaXterm建立ssh的连接（可以设置自动开启X11 Forwarding，这就体现出了它相比于分别操作Putty和X11 ming的优势)。MobaXterm要设置成下面这样，防止ssh休眠，并开启默认开启X11-Forwarding。</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220610170025158.png" alt="image-20220610170025158" style="zoom:80%;" /><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220610170133246.png" alt="image-20220610170133246" style="zoom:80%;" /><p>这样设置好后，当用ssh连接后，会出现下面的信息：</p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/image-20220610170254450.png" alt="image-20220610170254450" style="zoom:80%;" /><p>让MobaXterm在后台运行着，这样用Pycharm才可以正常在本地显示figure。记得在Mobaxterm中键入 <code>echo $DISPLAY</code>来看本地的号，该号要与下面Pycharm中运行程序的配置文件中的设置的一致，如下图所示。若是这两个号不一致，那么你就会得到本文最开始时的Matplotlib警告信息。</p><p><img src="https://jasonbourne-photo1.oss-cn-beijing.aliyuncs.com/img1/Snipaste_2022-06-10_17-06-31.jpg" alt="Snipaste_2022-06-10_17-06-31"></p><p>搞定！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开发环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境win10,  Pycharm2021&lt;/li&gt;
&lt;li&gt;使用远程的centos7 服务器上的python解释器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Matplotlib会抛出下面的警告，然后用matplotlib画的图也无法显示了。&lt;</summary>
      
    
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/categories/Python/"/>
    
    <category term="Pycharm" scheme="https://www.zhaomengfei.xyz/categories/Python/Pycharm/"/>
    
    
    <category term="Python" scheme="https://www.zhaomengfei.xyz/tags/Python/"/>
    
    <category term="Pycharm" scheme="https://www.zhaomengfei.xyz/tags/Pycharm/"/>
    
  </entry>
  
</feed>
